/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export declare namespace UpdateLeverage {
  export type RequestStruct = {
    account: AddressLike;
    symbol: BytesLike;
    isLong: boolean;
    isExecutionFeeFromTradeVault: boolean;
    isCrossMargin: boolean;
    leverage: BigNumberish;
    marginToken: AddressLike;
    addMarginAmount: BigNumberish;
    executionFee: BigNumberish;
    lastBlock: BigNumberish;
  };

  export type RequestStructOutput = [
    account: string,
    symbol: string,
    isLong: boolean,
    isExecutionFeeFromTradeVault: boolean,
    isCrossMargin: boolean,
    leverage: bigint,
    marginToken: string,
    addMarginAmount: bigint,
    executionFee: bigint,
    lastBlock: bigint
  ] & {
    account: string;
    symbol: string;
    isLong: boolean;
    isExecutionFeeFromTradeVault: boolean;
    isCrossMargin: boolean;
    leverage: bigint;
    marginToken: string;
    addMarginAmount: bigint;
    executionFee: bigint;
    lastBlock: bigint;
  };
}

export declare namespace UpdatePositionMargin {
  export type RequestStruct = {
    account: AddressLike;
    positionKey: BytesLike;
    marginToken: AddressLike;
    updateMarginAmount: BigNumberish;
    executionFee: BigNumberish;
    isAdd: boolean;
    isExecutionFeeFromTradeVault: boolean;
    lastBlock: BigNumberish;
  };

  export type RequestStructOutput = [
    account: string,
    positionKey: string,
    marginToken: string,
    updateMarginAmount: bigint,
    executionFee: bigint,
    isAdd: boolean,
    isExecutionFeeFromTradeVault: boolean,
    lastBlock: bigint
  ] & {
    account: string;
    positionKey: string;
    marginToken: string;
    updateMarginAmount: bigint;
    executionFee: bigint;
    isAdd: boolean;
    isExecutionFeeFromTradeVault: boolean;
    lastBlock: bigint;
  };
}

export interface PositionMarginProcessInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "CancelUpdateLeverageEvent"
      | "CancelUpdatePositionMarginEvent"
      | "CreateUpdateLeverageEvent"
      | "CreateUpdatePositionMarginEvent"
      | "UpdateLeverageSuccessEvent"
      | "UpdatePositionMarginSuccessEvent"
  ): EventFragment;
}

export namespace CancelUpdateLeverageEventEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    data: UpdateLeverage.RequestStruct,
    reasonCode: BytesLike
  ];
  export type OutputTuple = [
    requestId: bigint,
    data: UpdateLeverage.RequestStructOutput,
    reasonCode: string
  ];
  export interface OutputObject {
    requestId: bigint;
    data: UpdateLeverage.RequestStructOutput;
    reasonCode: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelUpdatePositionMarginEventEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    data: UpdatePositionMargin.RequestStruct,
    reasonCode: BytesLike
  ];
  export type OutputTuple = [
    requestId: bigint,
    data: UpdatePositionMargin.RequestStructOutput,
    reasonCode: string
  ];
  export interface OutputObject {
    requestId: bigint;
    data: UpdatePositionMargin.RequestStructOutput;
    reasonCode: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateUpdateLeverageEventEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    data: UpdateLeverage.RequestStruct
  ];
  export type OutputTuple = [
    requestId: bigint,
    data: UpdateLeverage.RequestStructOutput
  ];
  export interface OutputObject {
    requestId: bigint;
    data: UpdateLeverage.RequestStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateUpdatePositionMarginEventEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    data: UpdatePositionMargin.RequestStruct
  ];
  export type OutputTuple = [
    requestId: bigint,
    data: UpdatePositionMargin.RequestStructOutput
  ];
  export interface OutputObject {
    requestId: bigint;
    data: UpdatePositionMargin.RequestStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateLeverageSuccessEventEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    data: UpdateLeverage.RequestStruct
  ];
  export type OutputTuple = [
    requestId: bigint,
    data: UpdateLeverage.RequestStructOutput
  ];
  export interface OutputObject {
    requestId: bigint;
    data: UpdateLeverage.RequestStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatePositionMarginSuccessEventEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    data: UpdatePositionMargin.RequestStruct
  ];
  export type OutputTuple = [
    requestId: bigint,
    data: UpdatePositionMargin.RequestStructOutput
  ];
  export interface OutputObject {
    requestId: bigint;
    data: UpdatePositionMargin.RequestStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PositionMarginProcess extends BaseContract {
  connect(runner?: ContractRunner | null): PositionMarginProcess;
  waitForDeployment(): Promise<this>;

  interface: PositionMarginProcessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "CancelUpdateLeverageEvent"
  ): TypedContractEvent<
    CancelUpdateLeverageEventEvent.InputTuple,
    CancelUpdateLeverageEventEvent.OutputTuple,
    CancelUpdateLeverageEventEvent.OutputObject
  >;
  getEvent(
    key: "CancelUpdatePositionMarginEvent"
  ): TypedContractEvent<
    CancelUpdatePositionMarginEventEvent.InputTuple,
    CancelUpdatePositionMarginEventEvent.OutputTuple,
    CancelUpdatePositionMarginEventEvent.OutputObject
  >;
  getEvent(
    key: "CreateUpdateLeverageEvent"
  ): TypedContractEvent<
    CreateUpdateLeverageEventEvent.InputTuple,
    CreateUpdateLeverageEventEvent.OutputTuple,
    CreateUpdateLeverageEventEvent.OutputObject
  >;
  getEvent(
    key: "CreateUpdatePositionMarginEvent"
  ): TypedContractEvent<
    CreateUpdatePositionMarginEventEvent.InputTuple,
    CreateUpdatePositionMarginEventEvent.OutputTuple,
    CreateUpdatePositionMarginEventEvent.OutputObject
  >;
  getEvent(
    key: "UpdateLeverageSuccessEvent"
  ): TypedContractEvent<
    UpdateLeverageSuccessEventEvent.InputTuple,
    UpdateLeverageSuccessEventEvent.OutputTuple,
    UpdateLeverageSuccessEventEvent.OutputObject
  >;
  getEvent(
    key: "UpdatePositionMarginSuccessEvent"
  ): TypedContractEvent<
    UpdatePositionMarginSuccessEventEvent.InputTuple,
    UpdatePositionMarginSuccessEventEvent.OutputTuple,
    UpdatePositionMarginSuccessEventEvent.OutputObject
  >;

  filters: {
    "CancelUpdateLeverageEvent(uint256,tuple,bytes32)": TypedContractEvent<
      CancelUpdateLeverageEventEvent.InputTuple,
      CancelUpdateLeverageEventEvent.OutputTuple,
      CancelUpdateLeverageEventEvent.OutputObject
    >;
    CancelUpdateLeverageEvent: TypedContractEvent<
      CancelUpdateLeverageEventEvent.InputTuple,
      CancelUpdateLeverageEventEvent.OutputTuple,
      CancelUpdateLeverageEventEvent.OutputObject
    >;

    "CancelUpdatePositionMarginEvent(uint256,tuple,bytes32)": TypedContractEvent<
      CancelUpdatePositionMarginEventEvent.InputTuple,
      CancelUpdatePositionMarginEventEvent.OutputTuple,
      CancelUpdatePositionMarginEventEvent.OutputObject
    >;
    CancelUpdatePositionMarginEvent: TypedContractEvent<
      CancelUpdatePositionMarginEventEvent.InputTuple,
      CancelUpdatePositionMarginEventEvent.OutputTuple,
      CancelUpdatePositionMarginEventEvent.OutputObject
    >;

    "CreateUpdateLeverageEvent(uint256,tuple)": TypedContractEvent<
      CreateUpdateLeverageEventEvent.InputTuple,
      CreateUpdateLeverageEventEvent.OutputTuple,
      CreateUpdateLeverageEventEvent.OutputObject
    >;
    CreateUpdateLeverageEvent: TypedContractEvent<
      CreateUpdateLeverageEventEvent.InputTuple,
      CreateUpdateLeverageEventEvent.OutputTuple,
      CreateUpdateLeverageEventEvent.OutputObject
    >;

    "CreateUpdatePositionMarginEvent(uint256,tuple)": TypedContractEvent<
      CreateUpdatePositionMarginEventEvent.InputTuple,
      CreateUpdatePositionMarginEventEvent.OutputTuple,
      CreateUpdatePositionMarginEventEvent.OutputObject
    >;
    CreateUpdatePositionMarginEvent: TypedContractEvent<
      CreateUpdatePositionMarginEventEvent.InputTuple,
      CreateUpdatePositionMarginEventEvent.OutputTuple,
      CreateUpdatePositionMarginEventEvent.OutputObject
    >;

    "UpdateLeverageSuccessEvent(uint256,tuple)": TypedContractEvent<
      UpdateLeverageSuccessEventEvent.InputTuple,
      UpdateLeverageSuccessEventEvent.OutputTuple,
      UpdateLeverageSuccessEventEvent.OutputObject
    >;
    UpdateLeverageSuccessEvent: TypedContractEvent<
      UpdateLeverageSuccessEventEvent.InputTuple,
      UpdateLeverageSuccessEventEvent.OutputTuple,
      UpdateLeverageSuccessEventEvent.OutputObject
    >;

    "UpdatePositionMarginSuccessEvent(uint256,tuple)": TypedContractEvent<
      UpdatePositionMarginSuccessEventEvent.InputTuple,
      UpdatePositionMarginSuccessEventEvent.OutputTuple,
      UpdatePositionMarginSuccessEventEvent.OutputObject
    >;
    UpdatePositionMarginSuccessEvent: TypedContractEvent<
      UpdatePositionMarginSuccessEventEvent.InputTuple,
      UpdatePositionMarginSuccessEventEvent.OutputTuple,
      UpdatePositionMarginSuccessEventEvent.OutputObject
    >;
  };
}
