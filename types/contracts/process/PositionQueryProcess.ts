/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Position {
  export type PositionFeeStruct = {
    closeFeeInUsd: BigNumberish;
    openBorrowingFeePerToken: BigNumberish;
    realizedBorrowingFee: BigNumberish;
    realizedBorrowingFeeInUsd: BigNumberish;
    openFundingFeePerQty: BigNumberish;
    realizedFundingFee: BigNumberish;
    realizedFundingFeeInUsd: BigNumberish;
  };

  export type PositionFeeStructOutput = [
    closeFeeInUsd: bigint,
    openBorrowingFeePerToken: bigint,
    realizedBorrowingFee: bigint,
    realizedBorrowingFeeInUsd: bigint,
    openFundingFeePerQty: bigint,
    realizedFundingFee: bigint,
    realizedFundingFeeInUsd: bigint
  ] & {
    closeFeeInUsd: bigint;
    openBorrowingFeePerToken: bigint;
    realizedBorrowingFee: bigint;
    realizedBorrowingFeeInUsd: bigint;
    openFundingFeePerQty: bigint;
    realizedFundingFee: bigint;
    realizedFundingFeeInUsd: bigint;
  };

  export type PropsStruct = {
    key: BytesLike;
    symbol: BytesLike;
    isLong: boolean;
    isCrossMargin: boolean;
    account: AddressLike;
    marginToken: AddressLike;
    indexToken: AddressLike;
    qty: BigNumberish;
    entryPrice: BigNumberish;
    leverage: BigNumberish;
    initialMargin: BigNumberish;
    initialMarginInUsd: BigNumberish;
    initialMarginInUsdFromBalance: BigNumberish;
    holdPoolAmount: BigNumberish;
    positionFee: Position.PositionFeeStruct;
    realizedPnl: BigNumberish;
    lastUpdateTime: BigNumberish;
  };

  export type PropsStructOutput = [
    key: string,
    symbol: string,
    isLong: boolean,
    isCrossMargin: boolean,
    account: string,
    marginToken: string,
    indexToken: string,
    qty: bigint,
    entryPrice: bigint,
    leverage: bigint,
    initialMargin: bigint,
    initialMarginInUsd: bigint,
    initialMarginInUsdFromBalance: bigint,
    holdPoolAmount: bigint,
    positionFee: Position.PositionFeeStructOutput,
    realizedPnl: bigint,
    lastUpdateTime: bigint
  ] & {
    key: string;
    symbol: string;
    isLong: boolean;
    isCrossMargin: boolean;
    account: string;
    marginToken: string;
    indexToken: string;
    qty: bigint;
    entryPrice: bigint;
    leverage: bigint;
    initialMargin: bigint;
    initialMarginInUsd: bigint;
    initialMarginInUsdFromBalance: bigint;
    holdPoolAmount: bigint;
    positionFee: Position.PositionFeeStructOutput;
    realizedPnl: bigint;
    lastUpdateTime: bigint;
  };
}

export declare namespace OracleProcess {
  export type OracleParamStruct = {
    token: AddressLike;
    targetToken: AddressLike;
    minPrice: BigNumberish;
    maxPrice: BigNumberish;
  };

  export type OracleParamStructOutput = [
    token: string,
    targetToken: string,
    minPrice: bigint,
    maxPrice: bigint
  ] & {
    token: string;
    targetToken: string;
    minPrice: bigint;
    maxPrice: bigint;
  };
}

export interface PositionQueryProcessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getMM"
      | "getPositionFee((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256))"
      | "getPositionFee((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),(address,address,int256,int256)[])"
      | "getPositionMM"
      | "getPositionMMRate"
      | "getPositionUnPnl((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),int256,bool)"
      | "getPositionUnPnl((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),(address,address,int256,int256)[],int256,bool)"
      | "getPositionUnPnl((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),(address,address,int256,int256)[],int256)"
      | "hasOtherShortPosition"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMM",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionFee((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256))",
    values: [Position.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionFee((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),(address,address,int256,int256)[])",
    values: [Position.PropsStruct, OracleProcess.OracleParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionMM",
    values: [Position.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionMMRate",
    values: [Position.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionUnPnl((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),int256,bool)",
    values: [Position.PropsStruct, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionUnPnl((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),(address,address,int256,int256)[],int256,bool)",
    values: [
      Position.PropsStruct,
      OracleProcess.OracleParamStruct[],
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionUnPnl((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),(address,address,int256,int256)[],int256)",
    values: [
      Position.PropsStruct,
      OracleProcess.OracleParamStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasOtherShortPosition",
    values: [AddressLike, BytesLike, AddressLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "getMM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPositionFee((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionFee((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),(address,address,int256,int256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionMM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionMMRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionUnPnl((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),int256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionUnPnl((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),(address,address,int256,int256)[],int256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionUnPnl((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),(address,address,int256,int256)[],int256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasOtherShortPosition",
    data: BytesLike
  ): Result;
}

export interface PositionQueryProcess extends BaseContract {
  connect(runner?: ContractRunner | null): PositionQueryProcess;
  waitForDeployment(): Promise<this>;

  interface: PositionQueryProcessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getMM: TypedContractMethod<
    [qty: BigNumberish, leverage: BigNumberish, maxMMRate: BigNumberish],
    [bigint],
    "view"
  >;

  "getPositionFee((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256))": TypedContractMethod<
    [position: Position.PropsStruct],
    [bigint],
    "view"
  >;

  "getPositionFee((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),(address,address,int256,int256)[])": TypedContractMethod<
    [
      position: Position.PropsStruct,
      oracles: OracleProcess.OracleParamStruct[]
    ],
    [bigint],
    "view"
  >;

  getPositionMM: TypedContractMethod<
    [position: Position.PropsStruct],
    [bigint],
    "view"
  >;

  getPositionMMRate: TypedContractMethod<
    [position: Position.PropsStruct],
    [bigint],
    "view"
  >;

  "getPositionUnPnl((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),int256,bool)": TypedContractMethod<
    [
      position: Position.PropsStruct,
      computeIndexPrice: BigNumberish,
      pnlToken: boolean
    ],
    [bigint],
    "view"
  >;

  "getPositionUnPnl((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),(address,address,int256,int256)[],int256,bool)": TypedContractMethod<
    [
      position: Position.PropsStruct,
      oracles: OracleProcess.OracleParamStruct[],
      computeIndexPrice: BigNumberish,
      pnlToken: boolean
    ],
    [bigint],
    "view"
  >;

  "getPositionUnPnl((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),(address,address,int256,int256)[],int256)": TypedContractMethod<
    [
      position: Position.PropsStruct,
      oracles: OracleProcess.OracleParamStruct[],
      computeIndexPrice: BigNumberish
    ],
    [[bigint, bigint]],
    "view"
  >;

  hasOtherShortPosition: TypedContractMethod<
    [
      account: AddressLike,
      symbol: BytesLike,
      marginToken: AddressLike,
      isCrossMargin: boolean
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getMM"
  ): TypedContractMethod<
    [qty: BigNumberish, leverage: BigNumberish, maxMMRate: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionFee((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256))"
  ): TypedContractMethod<[position: Position.PropsStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPositionFee((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),(address,address,int256,int256)[])"
  ): TypedContractMethod<
    [
      position: Position.PropsStruct,
      oracles: OracleProcess.OracleParamStruct[]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionMM"
  ): TypedContractMethod<[position: Position.PropsStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPositionMMRate"
  ): TypedContractMethod<[position: Position.PropsStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPositionUnPnl((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),int256,bool)"
  ): TypedContractMethod<
    [
      position: Position.PropsStruct,
      computeIndexPrice: BigNumberish,
      pnlToken: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionUnPnl((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),(address,address,int256,int256)[],int256,bool)"
  ): TypedContractMethod<
    [
      position: Position.PropsStruct,
      oracles: OracleProcess.OracleParamStruct[],
      computeIndexPrice: BigNumberish,
      pnlToken: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionUnPnl((bytes32,bytes32,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,int256,int256,int256),int256,uint256),(address,address,int256,int256)[],int256)"
  ): TypedContractMethod<
    [
      position: Position.PropsStruct,
      oracles: OracleProcess.OracleParamStruct[],
      computeIndexPrice: BigNumberish
    ],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasOtherShortPosition"
  ): TypedContractMethod<
    [
      account: AddressLike,
      symbol: BytesLike,
      marginToken: AddressLike,
      isCrossMargin: boolean
    ],
    [boolean],
    "view"
  >;

  filters: {};
}
