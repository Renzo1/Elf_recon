/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace AppConfig {
  export type ChainConfigStruct = {
    wrapperToken: AddressLike;
    mintGasFeeLimit: BigNumberish;
    redeemGasFeeLimit: BigNumberish;
    placeIncreaseOrderGasFeeLimit: BigNumberish;
    placeDecreaseOrderGasFeeLimit: BigNumberish;
    positionUpdateMarginGasFeeLimit: BigNumberish;
    positionUpdateLeverageGasFeeLimit: BigNumberish;
    withdrawGasFeeLimit: BigNumberish;
    claimRewardsGasFeeLimit: BigNumberish;
  };

  export type ChainConfigStructOutput = [
    wrapperToken: string,
    mintGasFeeLimit: bigint,
    redeemGasFeeLimit: bigint,
    placeIncreaseOrderGasFeeLimit: bigint,
    placeDecreaseOrderGasFeeLimit: bigint,
    positionUpdateMarginGasFeeLimit: bigint,
    positionUpdateLeverageGasFeeLimit: bigint,
    withdrawGasFeeLimit: bigint,
    claimRewardsGasFeeLimit: bigint
  ] & {
    wrapperToken: string;
    mintGasFeeLimit: bigint;
    redeemGasFeeLimit: bigint;
    placeIncreaseOrderGasFeeLimit: bigint;
    placeDecreaseOrderGasFeeLimit: bigint;
    positionUpdateMarginGasFeeLimit: bigint;
    positionUpdateLeverageGasFeeLimit: bigint;
    withdrawGasFeeLimit: bigint;
    claimRewardsGasFeeLimit: bigint;
  };

  export type SymbolConfigStruct = {
    maxLeverage: BigNumberish;
    tickSize: BigNumberish;
    openFeeRate: BigNumberish;
    closeFeeRate: BigNumberish;
    maxLongOpenInterestCap: BigNumberish;
    maxShortOpenInterestCap: BigNumberish;
    longShortRatioLimit: BigNumberish;
    longShortOiBottomLimit: BigNumberish;
  };

  export type SymbolConfigStructOutput = [
    maxLeverage: bigint,
    tickSize: bigint,
    openFeeRate: bigint,
    closeFeeRate: bigint,
    maxLongOpenInterestCap: bigint,
    maxShortOpenInterestCap: bigint,
    longShortRatioLimit: bigint,
    longShortOiBottomLimit: bigint
  ] & {
    maxLeverage: bigint;
    tickSize: bigint;
    openFeeRate: bigint;
    closeFeeRate: bigint;
    maxLongOpenInterestCap: bigint;
    maxShortOpenInterestCap: bigint;
    longShortRatioLimit: bigint;
    longShortOiBottomLimit: bigint;
  };
}

export declare namespace AppTradeTokenConfig {
  export type TradeTokenConfigStruct = {
    isSupportCollateral: boolean;
    precision: BigNumberish;
    discount: BigNumberish;
    collateralUserCap: BigNumberish;
    collateralTotalCap: BigNumberish;
    liabilityUserCap: BigNumberish;
    liabilityTotalCap: BigNumberish;
    interestRateFactor: BigNumberish;
    liquidationFactor: BigNumberish;
  };

  export type TradeTokenConfigStructOutput = [
    isSupportCollateral: boolean,
    precision: bigint,
    discount: bigint,
    collateralUserCap: bigint,
    collateralTotalCap: bigint,
    liabilityUserCap: bigint,
    liabilityTotalCap: bigint,
    interestRateFactor: bigint,
    liquidationFactor: bigint
  ] & {
    isSupportCollateral: boolean;
    precision: bigint;
    discount: bigint;
    collateralUserCap: bigint;
    collateralTotalCap: bigint;
    liabilityUserCap: bigint;
    liabilityTotalCap: bigint;
    interestRateFactor: bigint;
    liquidationFactor: bigint;
  };
}

export declare namespace AppTradeConfig {
  export type TradeConfigStruct = {
    tradeTokens: AddressLike[];
    tradeTokenConfigs: AppTradeTokenConfig.TradeTokenConfigStruct[];
    minOrderMarginUSD: BigNumberish;
    availableCollateralRatio: BigNumberish;
    crossLtvLimit: BigNumberish;
    maxMaintenanceMarginRate: BigNumberish;
    fundingFeeBaseRate: BigNumberish;
    maxFundingBaseRate: BigNumberish;
    tradingFeeStakingRewardsRatio: BigNumberish;
    tradingFeePoolRewardsRatio: BigNumberish;
    tradingFeeUsdPoolRewardsRatio: BigNumberish;
    borrowingFeeStakingRewardsRatio: BigNumberish;
    borrowingFeePoolRewardsRatio: BigNumberish;
    autoReduceProfitFactor: BigNumberish;
    autoReduceLiquidityFactor: BigNumberish;
    swapSlipperTokenFactor: BigNumberish;
  };

  export type TradeConfigStructOutput = [
    tradeTokens: string[],
    tradeTokenConfigs: AppTradeTokenConfig.TradeTokenConfigStructOutput[],
    minOrderMarginUSD: bigint,
    availableCollateralRatio: bigint,
    crossLtvLimit: bigint,
    maxMaintenanceMarginRate: bigint,
    fundingFeeBaseRate: bigint,
    maxFundingBaseRate: bigint,
    tradingFeeStakingRewardsRatio: bigint,
    tradingFeePoolRewardsRatio: bigint,
    tradingFeeUsdPoolRewardsRatio: bigint,
    borrowingFeeStakingRewardsRatio: bigint,
    borrowingFeePoolRewardsRatio: bigint,
    autoReduceProfitFactor: bigint,
    autoReduceLiquidityFactor: bigint,
    swapSlipperTokenFactor: bigint
  ] & {
    tradeTokens: string[];
    tradeTokenConfigs: AppTradeTokenConfig.TradeTokenConfigStructOutput[];
    minOrderMarginUSD: bigint;
    availableCollateralRatio: bigint;
    crossLtvLimit: bigint;
    maxMaintenanceMarginRate: bigint;
    fundingFeeBaseRate: bigint;
    maxFundingBaseRate: bigint;
    tradingFeeStakingRewardsRatio: bigint;
    tradingFeePoolRewardsRatio: bigint;
    tradingFeeUsdPoolRewardsRatio: bigint;
    borrowingFeeStakingRewardsRatio: bigint;
    borrowingFeePoolRewardsRatio: bigint;
    autoReduceProfitFactor: bigint;
    autoReduceLiquidityFactor: bigint;
    swapSlipperTokenFactor: bigint;
  };
}

export declare namespace AppPoolConfig {
  export type StakeConfigStruct = {
    collateralProtectFactor: BigNumberish;
    collateralFactor: BigNumberish;
    minPrecisionMultiple: BigNumberish;
    mintFeeStakingRewardsRatio: BigNumberish;
    mintFeePoolRewardsRatio: BigNumberish;
    redeemFeeStakingRewardsRatio: BigNumberish;
    redeemFeePoolRewardsRatio: BigNumberish;
    poolRewardsIntervalLimit: BigNumberish;
    minApr: BigNumberish;
    maxApr: BigNumberish;
  };

  export type StakeConfigStructOutput = [
    collateralProtectFactor: bigint,
    collateralFactor: bigint,
    minPrecisionMultiple: bigint,
    mintFeeStakingRewardsRatio: bigint,
    mintFeePoolRewardsRatio: bigint,
    redeemFeeStakingRewardsRatio: bigint,
    redeemFeePoolRewardsRatio: bigint,
    poolRewardsIntervalLimit: bigint,
    minApr: bigint,
    maxApr: bigint
  ] & {
    collateralProtectFactor: bigint;
    collateralFactor: bigint;
    minPrecisionMultiple: bigint;
    mintFeeStakingRewardsRatio: bigint;
    mintFeePoolRewardsRatio: bigint;
    redeemFeeStakingRewardsRatio: bigint;
    redeemFeePoolRewardsRatio: bigint;
    poolRewardsIntervalLimit: bigint;
    minApr: bigint;
    maxApr: bigint;
  };

  export type LpPoolConfigStruct = {
    baseInterestRate: BigNumberish;
    poolLiquidityLimit: BigNumberish;
    mintFeeRate: BigNumberish;
    redeemFeeRate: BigNumberish;
    poolPnlRatioLimit: BigNumberish;
    unsettledBaseTokenRatioLimit: BigNumberish;
    unsettledStableTokenRatioLimit: BigNumberish;
    poolStableTokenRatioLimit: BigNumberish;
    poolStableTokenLossLimit: BigNumberish;
    assetTokens: AddressLike[];
  };

  export type LpPoolConfigStructOutput = [
    baseInterestRate: bigint,
    poolLiquidityLimit: bigint,
    mintFeeRate: bigint,
    redeemFeeRate: bigint,
    poolPnlRatioLimit: bigint,
    unsettledBaseTokenRatioLimit: bigint,
    unsettledStableTokenRatioLimit: bigint,
    poolStableTokenRatioLimit: bigint,
    poolStableTokenLossLimit: bigint,
    assetTokens: string[]
  ] & {
    baseInterestRate: bigint;
    poolLiquidityLimit: bigint;
    mintFeeRate: bigint;
    redeemFeeRate: bigint;
    poolPnlRatioLimit: bigint;
    unsettledBaseTokenRatioLimit: bigint;
    unsettledStableTokenRatioLimit: bigint;
    poolStableTokenRatioLimit: bigint;
    poolStableTokenLossLimit: bigint;
    assetTokens: string[];
  };

  export type UsdPoolConfigStruct = {
    poolLiquidityLimit: BigNumberish;
    mintFeeRate: BigNumberish;
    redeemFeeRate: BigNumberish;
    unsettledRatioLimit: BigNumberish;
    supportStableTokens: AddressLike[];
    stableTokensBorrowingInterestRate: BigNumberish[];
  };

  export type UsdPoolConfigStructOutput = [
    poolLiquidityLimit: bigint,
    mintFeeRate: bigint,
    redeemFeeRate: bigint,
    unsettledRatioLimit: bigint,
    supportStableTokens: string[],
    stableTokensBorrowingInterestRate: bigint[]
  ] & {
    poolLiquidityLimit: bigint;
    mintFeeRate: bigint;
    redeemFeeRate: bigint;
    unsettledRatioLimit: bigint;
    supportStableTokens: string[];
    stableTokensBorrowingInterestRate: bigint[];
  };
}

export declare namespace IConfig {
  export type CommonConfigParamsStruct = {
    chainConfig: AppConfig.ChainConfigStruct;
    tradeConfig: AppTradeConfig.TradeConfigStruct;
    stakeConfig: AppPoolConfig.StakeConfigStruct;
    uniswapRouter: AddressLike;
  };

  export type CommonConfigParamsStructOutput = [
    chainConfig: AppConfig.ChainConfigStructOutput,
    tradeConfig: AppTradeConfig.TradeConfigStructOutput,
    stakeConfig: AppPoolConfig.StakeConfigStructOutput,
    uniswapRouter: string
  ] & {
    chainConfig: AppConfig.ChainConfigStructOutput;
    tradeConfig: AppTradeConfig.TradeConfigStructOutput;
    stakeConfig: AppPoolConfig.StakeConfigStructOutput;
    uniswapRouter: string;
  };
}

export interface ConfigProcessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getConfig"
      | "getPoolConfig"
      | "getSymbolConfig"
      | "getUsdPoolConfig"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPoolConfig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSymbolConfig",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdPoolConfig",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSymbolConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdPoolConfig",
    data: BytesLike
  ): Result;
}

export interface ConfigProcess extends BaseContract {
  connect(runner?: ContractRunner | null): ConfigProcess;
  waitForDeployment(): Promise<this>;

  interface: ConfigProcessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getConfig: TypedContractMethod<
    [],
    [IConfig.CommonConfigParamsStructOutput],
    "view"
  >;

  getPoolConfig: TypedContractMethod<
    [stakeToken: AddressLike],
    [AppPoolConfig.LpPoolConfigStructOutput],
    "view"
  >;

  getSymbolConfig: TypedContractMethod<
    [code: BytesLike],
    [AppConfig.SymbolConfigStructOutput],
    "view"
  >;

  getUsdPoolConfig: TypedContractMethod<
    [],
    [AppPoolConfig.UsdPoolConfigStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<[], [IConfig.CommonConfigParamsStructOutput], "view">;
  getFunction(
    nameOrSignature: "getPoolConfig"
  ): TypedContractMethod<
    [stakeToken: AddressLike],
    [AppPoolConfig.LpPoolConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSymbolConfig"
  ): TypedContractMethod<
    [code: BytesLike],
    [AppConfig.SymbolConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUsdPoolConfig"
  ): TypedContractMethod<[], [AppPoolConfig.UsdPoolConfigStructOutput], "view">;

  filters: {};
}
