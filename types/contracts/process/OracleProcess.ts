/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace OracleProcess {
  export type OracleParamStruct = {
    token: AddressLike;
    targetToken: AddressLike;
    minPrice: BigNumberish;
    maxPrice: BigNumberish;
  };

  export type OracleParamStructOutput = [
    token: string,
    targetToken: string,
    minPrice: bigint,
    maxPrice: bigint
  ] & {
    token: string;
    targetToken: string;
    minPrice: bigint;
    maxPrice: bigint;
  };
}

export declare namespace OraclePrice {
  export type DataStruct = { min: BigNumberish; max: BigNumberish };

  export type DataStructOutput = [min: bigint, max: bigint] & {
    min: bigint;
    max: bigint;
  };
}

export interface OracleProcessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getIntOraclePrices((address,address,int256,int256)[],address,address,bool)"
      | "getIntOraclePrices((address,address,int256,int256)[],address,bool)"
      | "getLatestUsdPrice(address,bool)"
      | "getLatestUsdPrice(address,address,bool)"
      | "getLatestUsdPrice(address)"
      | "getLatestUsdUintPrice(address,address,bool)"
      | "getLatestUsdUintPrice(address,bool)"
      | "getLatestUsdUintPrice(address)"
      | "getOraclePrices((address,address,int256,int256)[],address,address,bool)"
      | "getOraclePrices((address,address,int256,int256)[],address,bool)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getIntOraclePrices((address,address,int256,int256)[],address,address,bool)",
    values: [
      OracleProcess.OracleParamStruct[],
      AddressLike,
      AddressLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getIntOraclePrices((address,address,int256,int256)[],address,bool)",
    values: [OracleProcess.OracleParamStruct[], AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestUsdPrice(address,bool)",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestUsdPrice(address,address,bool)",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestUsdPrice(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestUsdUintPrice(address,address,bool)",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestUsdUintPrice(address,bool)",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestUsdUintPrice(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePrices((address,address,int256,int256)[],address,address,bool)",
    values: [
      OracleProcess.OracleParamStruct[],
      AddressLike,
      AddressLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePrices((address,address,int256,int256)[],address,bool)",
    values: [OracleProcess.OracleParamStruct[], AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "getIntOraclePrices((address,address,int256,int256)[],address,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIntOraclePrices((address,address,int256,int256)[],address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestUsdPrice(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestUsdPrice(address,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestUsdPrice(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestUsdUintPrice(address,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestUsdUintPrice(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestUsdUintPrice(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePrices((address,address,int256,int256)[],address,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePrices((address,address,int256,int256)[],address,bool)",
    data: BytesLike
  ): Result;
}

export interface OracleProcess extends BaseContract {
  connect(runner?: ContractRunner | null): OracleProcess;
  waitForDeployment(): Promise<this>;

  interface: OracleProcessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  "getIntOraclePrices((address,address,int256,int256)[],address,address,bool)": TypedContractMethod<
    [
      params: OracleProcess.OracleParamStruct[],
      token: AddressLike,
      targetToken: AddressLike,
      isMin: boolean
    ],
    [bigint],
    "view"
  >;

  "getIntOraclePrices((address,address,int256,int256)[],address,bool)": TypedContractMethod<
    [
      params: OracleProcess.OracleParamStruct[],
      token: AddressLike,
      isMin: boolean
    ],
    [bigint],
    "view"
  >;

  "getLatestUsdPrice(address,bool)": TypedContractMethod<
    [token: AddressLike, min: boolean],
    [bigint],
    "view"
  >;

  "getLatestUsdPrice(address,address,bool)": TypedContractMethod<
    [token: AddressLike, targetToken: AddressLike, min: boolean],
    [bigint],
    "view"
  >;

  "getLatestUsdPrice(address)": TypedContractMethod<
    [token: AddressLike],
    [OraclePrice.DataStructOutput],
    "view"
  >;

  "getLatestUsdUintPrice(address,address,bool)": TypedContractMethod<
    [token: AddressLike, targetToken: AddressLike, min: boolean],
    [bigint],
    "view"
  >;

  "getLatestUsdUintPrice(address,bool)": TypedContractMethod<
    [token: AddressLike, min: boolean],
    [bigint],
    "view"
  >;

  "getLatestUsdUintPrice(address)": TypedContractMethod<
    [token: AddressLike],
    [[bigint, bigint] & { min: bigint; max: bigint }],
    "view"
  >;

  "getOraclePrices((address,address,int256,int256)[],address,address,bool)": TypedContractMethod<
    [
      params: OracleProcess.OracleParamStruct[],
      token: AddressLike,
      targetToken: AddressLike,
      isMin: boolean
    ],
    [bigint],
    "view"
  >;

  "getOraclePrices((address,address,int256,int256)[],address,bool)": TypedContractMethod<
    [
      params: OracleProcess.OracleParamStruct[],
      token: AddressLike,
      isMin: boolean
    ],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getIntOraclePrices((address,address,int256,int256)[],address,address,bool)"
  ): TypedContractMethod<
    [
      params: OracleProcess.OracleParamStruct[],
      token: AddressLike,
      targetToken: AddressLike,
      isMin: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIntOraclePrices((address,address,int256,int256)[],address,bool)"
  ): TypedContractMethod<
    [
      params: OracleProcess.OracleParamStruct[],
      token: AddressLike,
      isMin: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestUsdPrice(address,bool)"
  ): TypedContractMethod<[token: AddressLike, min: boolean], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLatestUsdPrice(address,address,bool)"
  ): TypedContractMethod<
    [token: AddressLike, targetToken: AddressLike, min: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestUsdPrice(address)"
  ): TypedContractMethod<
    [token: AddressLike],
    [OraclePrice.DataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestUsdUintPrice(address,address,bool)"
  ): TypedContractMethod<
    [token: AddressLike, targetToken: AddressLike, min: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestUsdUintPrice(address,bool)"
  ): TypedContractMethod<[token: AddressLike, min: boolean], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLatestUsdUintPrice(address)"
  ): TypedContractMethod<
    [token: AddressLike],
    [[bigint, bigint] & { min: bigint; max: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOraclePrices((address,address,int256,int256)[],address,address,bool)"
  ): TypedContractMethod<
    [
      params: OracleProcess.OracleParamStruct[],
      token: AddressLike,
      targetToken: AddressLike,
      isMin: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOraclePrices((address,address,int256,int256)[],address,bool)"
  ): TypedContractMethod<
    [
      params: OracleProcess.OracleParamStruct[],
      token: AddressLike,
      isMin: boolean
    ],
    [bigint],
    "view"
  >;

  filters: {};
}
