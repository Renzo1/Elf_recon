/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface MarketFactoryProcessInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "MarketCreated"
      | "MarketOIUpdateEvent"
      | "PoolCreated"
  ): EventFragment;
}

export namespace MarketCreatedEvent {
  export type InputTuple = [
    code: BytesLike,
    stakeTokenName: string,
    indexToken: AddressLike,
    baseToken: AddressLike,
    stakeToken: AddressLike
  ];
  export type OutputTuple = [
    code: string,
    stakeTokenName: string,
    indexToken: string,
    baseToken: string,
    stakeToken: string
  ];
  export interface OutputObject {
    code: string;
    stakeTokenName: string;
    indexToken: string;
    baseToken: string;
    stakeToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketOIUpdateEventEvent {
  export type InputTuple = [
    symbol: BytesLike,
    isLong: boolean,
    openInterest: BigNumberish
  ];
  export type OutputTuple = [
    symbol: string,
    isLong: boolean,
    openInterest: bigint
  ];
  export interface OutputObject {
    symbol: string;
    isLong: boolean;
    openInterest: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [name: string, stakeToken: AddressLike];
  export type OutputTuple = [name: string, stakeToken: string];
  export interface OutputObject {
    name: string;
    stakeToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarketFactoryProcess extends BaseContract {
  connect(runner?: ContractRunner | null): MarketFactoryProcess;
  waitForDeployment(): Promise<this>;

  interface: MarketFactoryProcessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "MarketCreated"
  ): TypedContractEvent<
    MarketCreatedEvent.InputTuple,
    MarketCreatedEvent.OutputTuple,
    MarketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketOIUpdateEvent"
  ): TypedContractEvent<
    MarketOIUpdateEventEvent.InputTuple,
    MarketOIUpdateEventEvent.OutputTuple,
    MarketOIUpdateEventEvent.OutputObject
  >;
  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;

  filters: {
    "MarketCreated(bytes32,string,address,address,address)": TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;
    MarketCreated: TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;

    "MarketOIUpdateEvent(bytes32,bool,uint256)": TypedContractEvent<
      MarketOIUpdateEventEvent.InputTuple,
      MarketOIUpdateEventEvent.OutputTuple,
      MarketOIUpdateEventEvent.OutputObject
    >;
    MarketOIUpdateEvent: TypedContractEvent<
      MarketOIUpdateEventEvent.InputTuple,
      MarketOIUpdateEventEvent.OutputTuple,
      MarketOIUpdateEventEvent.OutputObject
    >;

    "PoolCreated(string,address)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
  };
}
