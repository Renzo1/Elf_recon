/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Order {
  export type OrderInfoStruct = {
    account: AddressLike;
    symbol: BytesLike;
    orderSide: BigNumberish;
    posSide: BigNumberish;
    orderType: BigNumberish;
    stopType: BigNumberish;
    isCrossMargin: boolean;
    isExecutionFeeFromTradeVault: boolean;
    marginToken: AddressLike;
    qty: BigNumberish;
    leverage: BigNumberish;
    orderMargin: BigNumberish;
    triggerPrice: BigNumberish;
    acceptablePrice: BigNumberish;
    placeTime: BigNumberish;
    executionFee: BigNumberish;
    lastBlock: BigNumberish;
  };

  export type OrderInfoStructOutput = [
    account: string,
    symbol: string,
    orderSide: bigint,
    posSide: bigint,
    orderType: bigint,
    stopType: bigint,
    isCrossMargin: boolean,
    isExecutionFeeFromTradeVault: boolean,
    marginToken: string,
    qty: bigint,
    leverage: bigint,
    orderMargin: bigint,
    triggerPrice: bigint,
    acceptablePrice: bigint,
    placeTime: bigint,
    executionFee: bigint,
    lastBlock: bigint
  ] & {
    account: string;
    symbol: string;
    orderSide: bigint;
    posSide: bigint;
    orderType: bigint;
    stopType: bigint;
    isCrossMargin: boolean;
    isExecutionFeeFromTradeVault: boolean;
    marginToken: string;
    qty: bigint;
    leverage: bigint;
    orderMargin: bigint;
    triggerPrice: bigint;
    acceptablePrice: bigint;
    placeTime: bigint;
    executionFee: bigint;
    lastBlock: bigint;
  };
}

export interface CancelOrderProcessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CANCEL_ORDER_AUTO_REDUCE"
      | "CANCEL_ORDER_LIQUIDATION"
      | "CANCEL_ORDER_POSITION_CLOSE"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CancelOrderEvent"): EventFragment;

  encodeFunctionData(
    functionFragment: "CANCEL_ORDER_AUTO_REDUCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CANCEL_ORDER_LIQUIDATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CANCEL_ORDER_POSITION_CLOSE",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CANCEL_ORDER_AUTO_REDUCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CANCEL_ORDER_LIQUIDATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CANCEL_ORDER_POSITION_CLOSE",
    data: BytesLike
  ): Result;
}

export namespace CancelOrderEventEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    data: Order.OrderInfoStruct,
    reasonCode: BytesLike
  ];
  export type OutputTuple = [
    orderId: bigint,
    data: Order.OrderInfoStructOutput,
    reasonCode: string
  ];
  export interface OutputObject {
    orderId: bigint;
    data: Order.OrderInfoStructOutput;
    reasonCode: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CancelOrderProcess extends BaseContract {
  connect(runner?: ContractRunner | null): CancelOrderProcess;
  waitForDeployment(): Promise<this>;

  interface: CancelOrderProcessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CANCEL_ORDER_AUTO_REDUCE: TypedContractMethod<[], [string], "view">;

  CANCEL_ORDER_LIQUIDATION: TypedContractMethod<[], [string], "view">;

  CANCEL_ORDER_POSITION_CLOSE: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CANCEL_ORDER_AUTO_REDUCE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CANCEL_ORDER_LIQUIDATION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CANCEL_ORDER_POSITION_CLOSE"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CancelOrderEvent"
  ): TypedContractEvent<
    CancelOrderEventEvent.InputTuple,
    CancelOrderEventEvent.OutputTuple,
    CancelOrderEventEvent.OutputObject
  >;

  filters: {
    "CancelOrderEvent(uint256,tuple,bytes32)": TypedContractEvent<
      CancelOrderEventEvent.InputTuple,
      CancelOrderEventEvent.OutputTuple,
      CancelOrderEventEvent.OutputObject
    >;
    CancelOrderEvent: TypedContractEvent<
      CancelOrderEventEvent.InputTuple,
      CancelOrderEventEvent.OutputTuple,
      CancelOrderEventEvent.OutputObject
    >;
  };
}
