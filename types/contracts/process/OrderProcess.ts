/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export declare namespace Order {
  export type OrderInfoStruct = {
    account: AddressLike;
    symbol: BytesLike;
    orderSide: BigNumberish;
    posSide: BigNumberish;
    orderType: BigNumberish;
    stopType: BigNumberish;
    isCrossMargin: boolean;
    isExecutionFeeFromTradeVault: boolean;
    marginToken: AddressLike;
    qty: BigNumberish;
    leverage: BigNumberish;
    orderMargin: BigNumberish;
    triggerPrice: BigNumberish;
    acceptablePrice: BigNumberish;
    placeTime: BigNumberish;
    executionFee: BigNumberish;
    lastBlock: BigNumberish;
  };

  export type OrderInfoStructOutput = [
    account: string,
    symbol: string,
    orderSide: bigint,
    posSide: bigint,
    orderType: bigint,
    stopType: bigint,
    isCrossMargin: boolean,
    isExecutionFeeFromTradeVault: boolean,
    marginToken: string,
    qty: bigint,
    leverage: bigint,
    orderMargin: bigint,
    triggerPrice: bigint,
    acceptablePrice: bigint,
    placeTime: bigint,
    executionFee: bigint,
    lastBlock: bigint
  ] & {
    account: string;
    symbol: string;
    orderSide: bigint;
    posSide: bigint;
    orderType: bigint;
    stopType: bigint;
    isCrossMargin: boolean;
    isExecutionFeeFromTradeVault: boolean;
    marginToken: string;
    qty: bigint;
    leverage: bigint;
    orderMargin: bigint;
    triggerPrice: bigint;
    acceptablePrice: bigint;
    placeTime: bigint;
    executionFee: bigint;
    lastBlock: bigint;
  };
}

export interface OrderProcessInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "CancelOrderEvent"
      | "OrderFilledEvent"
      | "PlaceOrderEvent"
  ): EventFragment;
}

export namespace CancelOrderEventEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    data: Order.OrderInfoStruct,
    reasonCode: BytesLike
  ];
  export type OutputTuple = [
    orderId: bigint,
    data: Order.OrderInfoStructOutput,
    reasonCode: string
  ];
  export interface OutputObject {
    orderId: bigint;
    data: Order.OrderInfoStructOutput;
    reasonCode: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderFilledEventEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    data: Order.OrderInfoStruct,
    fillTime: BigNumberish,
    fillPrice: BigNumberish
  ];
  export type OutputTuple = [
    orderId: bigint,
    data: Order.OrderInfoStructOutput,
    fillTime: bigint,
    fillPrice: bigint
  ];
  export interface OutputObject {
    orderId: bigint;
    data: Order.OrderInfoStructOutput;
    fillTime: bigint;
    fillPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlaceOrderEventEvent {
  export type InputTuple = [orderId: BigNumberish, data: Order.OrderInfoStruct];
  export type OutputTuple = [
    orderId: bigint,
    data: Order.OrderInfoStructOutput
  ];
  export interface OutputObject {
    orderId: bigint;
    data: Order.OrderInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OrderProcess extends BaseContract {
  connect(runner?: ContractRunner | null): OrderProcess;
  waitForDeployment(): Promise<this>;

  interface: OrderProcessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "CancelOrderEvent"
  ): TypedContractEvent<
    CancelOrderEventEvent.InputTuple,
    CancelOrderEventEvent.OutputTuple,
    CancelOrderEventEvent.OutputObject
  >;
  getEvent(
    key: "OrderFilledEvent"
  ): TypedContractEvent<
    OrderFilledEventEvent.InputTuple,
    OrderFilledEventEvent.OutputTuple,
    OrderFilledEventEvent.OutputObject
  >;
  getEvent(
    key: "PlaceOrderEvent"
  ): TypedContractEvent<
    PlaceOrderEventEvent.InputTuple,
    PlaceOrderEventEvent.OutputTuple,
    PlaceOrderEventEvent.OutputObject
  >;

  filters: {
    "CancelOrderEvent(uint256,tuple,bytes32)": TypedContractEvent<
      CancelOrderEventEvent.InputTuple,
      CancelOrderEventEvent.OutputTuple,
      CancelOrderEventEvent.OutputObject
    >;
    CancelOrderEvent: TypedContractEvent<
      CancelOrderEventEvent.InputTuple,
      CancelOrderEventEvent.OutputTuple,
      CancelOrderEventEvent.OutputObject
    >;

    "OrderFilledEvent(uint256,tuple,uint256,uint256)": TypedContractEvent<
      OrderFilledEventEvent.InputTuple,
      OrderFilledEventEvent.OutputTuple,
      OrderFilledEventEvent.OutputObject
    >;
    OrderFilledEvent: TypedContractEvent<
      OrderFilledEventEvent.InputTuple,
      OrderFilledEventEvent.OutputTuple,
      OrderFilledEventEvent.OutputObject
    >;

    "PlaceOrderEvent(uint256,tuple)": TypedContractEvent<
      PlaceOrderEventEvent.InputTuple,
      PlaceOrderEventEvent.OutputTuple,
      PlaceOrderEventEvent.OutputObject
    >;
    PlaceOrderEvent: TypedContractEvent<
      PlaceOrderEventEvent.InputTuple,
      PlaceOrderEventEvent.OutputTuple,
      PlaceOrderEventEvent.OutputObject
    >;
  };
}
