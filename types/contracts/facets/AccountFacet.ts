/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace AssetsProcess {
  export type UpdateAccountTokenParamsStruct = {
    account: AddressLike;
    tokens: AddressLike[];
    changedTokenAmounts: BigNumberish[];
  };

  export type UpdateAccountTokenParamsStructOutput = [
    account: string,
    tokens: string[],
    changedTokenAmounts: bigint[]
  ] & { account: string; tokens: string[]; changedTokenAmounts: bigint[] };
}

export declare namespace OracleProcess {
  export type OracleParamStruct = {
    token: AddressLike;
    targetToken: AddressLike;
    minPrice: BigNumberish;
    maxPrice: BigNumberish;
  };

  export type OracleParamStructOutput = [
    token: string,
    targetToken: string,
    minPrice: bigint,
    maxPrice: bigint
  ] & {
    token: string;
    targetToken: string;
    minPrice: bigint;
    maxPrice: bigint;
  };
}

export declare namespace Account {
  export type TokenBalanceStruct = {
    amount: BigNumberish;
    usedAmount: BigNumberish;
    interest: BigNumberish;
    liability: BigNumberish;
  };

  export type TokenBalanceStructOutput = [
    amount: bigint,
    usedAmount: bigint,
    interest: bigint,
    liability: bigint
  ] & {
    amount: bigint;
    usedAmount: bigint;
    interest: bigint;
    liability: bigint;
  };
}

export declare namespace IAccount {
  export type AccountInfoStruct = {
    owner: AddressLike;
    tokenBalances: Account.TokenBalanceStruct[];
    tokens: AddressLike[];
    positions: BytesLike[];
    portfolioNetValue: BigNumberish;
    totalUsedValue: BigNumberish;
    availableValue: BigNumberish;
    orderHoldInUsd: BigNumberish;
    crossMMR: BigNumberish;
    crossNetValue: BigNumberish;
    totalMM: BigNumberish;
  };

  export type AccountInfoStructOutput = [
    owner: string,
    tokenBalances: Account.TokenBalanceStructOutput[],
    tokens: string[],
    positions: string[],
    portfolioNetValue: bigint,
    totalUsedValue: bigint,
    availableValue: bigint,
    orderHoldInUsd: bigint,
    crossMMR: bigint,
    crossNetValue: bigint,
    totalMM: bigint
  ] & {
    owner: string;
    tokenBalances: Account.TokenBalanceStructOutput[];
    tokens: string[];
    positions: string[];
    portfolioNetValue: bigint;
    totalUsedValue: bigint;
    availableValue: bigint;
    orderHoldInUsd: bigint;
    crossMMR: bigint;
    crossNetValue: bigint;
    totalMM: bigint;
  };
}

export interface AccountFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchUpdateAccountToken"
      | "cancelWithdraw"
      | "createWithdrawRequest"
      | "deposit"
      | "executeWithdraw"
      | "getAccountInfo"
      | "getAccountInfoWithOracles"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchUpdateAccountToken",
    values: [AssetsProcess.UpdateAccountTokenParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelWithdraw",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createWithdrawRequest",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithdraw",
    values: [BigNumberish, OracleProcess.OracleParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountInfoWithOracles",
    values: [AddressLike, OracleProcess.OracleParamStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchUpdateAccountToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWithdrawRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountInfoWithOracles",
    data: BytesLike
  ): Result;
}

export interface AccountFacet extends BaseContract {
  connect(runner?: ContractRunner | null): AccountFacet;
  waitForDeployment(): Promise<this>;

  interface: AccountFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchUpdateAccountToken: TypedContractMethod<
    [params: AssetsProcess.UpdateAccountTokenParamsStruct],
    [void],
    "nonpayable"
  >;

  cancelWithdraw: TypedContractMethod<
    [requestId: BigNumberish, reasonCode: BytesLike],
    [void],
    "nonpayable"
  >;

  createWithdrawRequest: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  executeWithdraw: TypedContractMethod<
    [requestId: BigNumberish, oracles: OracleProcess.OracleParamStruct[]],
    [void],
    "nonpayable"
  >;

  getAccountInfo: TypedContractMethod<
    [account: AddressLike],
    [IAccount.AccountInfoStructOutput],
    "view"
  >;

  getAccountInfoWithOracles: TypedContractMethod<
    [account: AddressLike, oracles: OracleProcess.OracleParamStruct[]],
    [IAccount.AccountInfoStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchUpdateAccountToken"
  ): TypedContractMethod<
    [params: AssetsProcess.UpdateAccountTokenParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelWithdraw"
  ): TypedContractMethod<
    [requestId: BigNumberish, reasonCode: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createWithdrawRequest"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeWithdraw"
  ): TypedContractMethod<
    [requestId: BigNumberish, oracles: OracleProcess.OracleParamStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAccountInfo"
  ): TypedContractMethod<
    [account: AddressLike],
    [IAccount.AccountInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccountInfoWithOracles"
  ): TypedContractMethod<
    [account: AddressLike, oracles: OracleProcess.OracleParamStruct[]],
    [IAccount.AccountInfoStructOutput],
    "view"
  >;

  filters: {};
}
