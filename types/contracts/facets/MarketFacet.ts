/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace AppConfig {
  export type SymbolConfigStruct = {
    maxLeverage: BigNumberish;
    tickSize: BigNumberish;
    openFeeRate: BigNumberish;
    closeFeeRate: BigNumberish;
    maxLongOpenInterestCap: BigNumberish;
    maxShortOpenInterestCap: BigNumberish;
    longShortRatioLimit: BigNumberish;
    longShortOiBottomLimit: BigNumberish;
  };

  export type SymbolConfigStructOutput = [
    maxLeverage: bigint,
    tickSize: bigint,
    openFeeRate: bigint,
    closeFeeRate: bigint,
    maxLongOpenInterestCap: bigint,
    maxShortOpenInterestCap: bigint,
    longShortRatioLimit: bigint,
    longShortOiBottomLimit: bigint
  ] & {
    maxLeverage: bigint;
    tickSize: bigint;
    openFeeRate: bigint;
    closeFeeRate: bigint;
    maxLongOpenInterestCap: bigint;
    maxShortOpenInterestCap: bigint;
    longShortRatioLimit: bigint;
    longShortOiBottomLimit: bigint;
  };
}

export declare namespace IMarket {
  export type SymbolInfoStruct = {
    code: BytesLike;
    status: BigNumberish;
    stakeToken: AddressLike;
    indexToken: AddressLike;
    baseToken: AddressLike;
    config: AppConfig.SymbolConfigStruct;
  };

  export type SymbolInfoStructOutput = [
    code: string,
    status: bigint,
    stakeToken: string,
    indexToken: string,
    baseToken: string,
    config: AppConfig.SymbolConfigStructOutput
  ] & {
    code: string;
    status: bigint;
    stakeToken: string;
    indexToken: string;
    baseToken: string;
    config: AppConfig.SymbolConfigStructOutput;
  };

  export type MarketInfoStruct = {
    symbolInfo: Symbol.PropsStruct;
    longPositionInterest: BigNumberish;
    longPositionEntryPrice: BigNumberish;
    totalShortPositionInterest: BigNumberish;
    shortPositions: Market.MarketPositionStruct[];
    availableLiquidity: BigNumberish;
    fundingFee: Market.FundingFeeStruct;
  };

  export type MarketInfoStructOutput = [
    symbolInfo: Symbol.PropsStructOutput,
    longPositionInterest: bigint,
    longPositionEntryPrice: bigint,
    totalShortPositionInterest: bigint,
    shortPositions: Market.MarketPositionStructOutput[],
    availableLiquidity: bigint,
    fundingFee: Market.FundingFeeStructOutput
  ] & {
    symbolInfo: Symbol.PropsStructOutput;
    longPositionInterest: bigint;
    longPositionEntryPrice: bigint;
    totalShortPositionInterest: bigint;
    shortPositions: Market.MarketPositionStructOutput[];
    availableLiquidity: bigint;
    fundingFee: Market.FundingFeeStructOutput;
  };

  export type TradeTokenInfoStruct = {
    tradeTokenCollateral: BigNumberish;
    tradeTokenLiability: BigNumberish;
  };

  export type TradeTokenInfoStructOutput = [
    tradeTokenCollateral: bigint,
    tradeTokenLiability: bigint
  ] & { tradeTokenCollateral: bigint; tradeTokenLiability: bigint };
}

export declare namespace OracleProcess {
  export type OracleParamStruct = {
    token: AddressLike;
    targetToken: AddressLike;
    minPrice: BigNumberish;
    maxPrice: BigNumberish;
  };

  export type OracleParamStructOutput = [
    token: string,
    targetToken: string,
    minPrice: bigint,
    maxPrice: bigint
  ] & {
    token: string;
    targetToken: string;
    minPrice: bigint;
    maxPrice: bigint;
  };
}

export declare namespace Symbol {
  export type PropsStruct = {
    code: BytesLike;
    status: BigNumberish;
    stakeToken: AddressLike;
    indexToken: AddressLike;
    baseToken: AddressLike;
    baseTokenName: string;
  };

  export type PropsStructOutput = [
    code: string,
    status: bigint,
    stakeToken: string,
    indexToken: string,
    baseToken: string,
    baseTokenName: string
  ] & {
    code: string;
    status: bigint;
    stakeToken: string;
    indexToken: string;
    baseToken: string;
    baseTokenName: string;
  };
}

export declare namespace Market {
  export type MarketPositionStruct = {
    openInterest: BigNumberish;
    entryPrice: BigNumberish;
  };

  export type MarketPositionStructOutput = [
    openInterest: bigint,
    entryPrice: bigint
  ] & { openInterest: bigint; entryPrice: bigint };

  export type FundingFeeStruct = {
    longFundingFeePerQty: BigNumberish;
    shortFundingFeePerQty: BigNumberish;
    totalLongFundingFee: BigNumberish;
    totalShortFundingFee: BigNumberish;
    longFundingFeeRate: BigNumberish;
    shortFundingFeeRate: BigNumberish;
    lastUpdateTime: BigNumberish;
  };

  export type FundingFeeStructOutput = [
    longFundingFeePerQty: bigint,
    shortFundingFeePerQty: bigint,
    totalLongFundingFee: bigint,
    totalShortFundingFee: bigint,
    longFundingFeeRate: bigint,
    shortFundingFeeRate: bigint,
    lastUpdateTime: bigint
  ] & {
    longFundingFeePerQty: bigint;
    shortFundingFeePerQty: bigint;
    totalLongFundingFee: bigint;
    totalShortFundingFee: bigint;
    longFundingFeeRate: bigint;
    shortFundingFeeRate: bigint;
    lastUpdateTime: bigint;
  };
}

export interface MarketFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllSymbols"
      | "getLastUuid"
      | "getMarketInfo"
      | "getStakeUsdToken"
      | "getSymbol"
      | "getTradeTokenInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllSymbols",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUuid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInfo",
    values: [BytesLike, OracleProcess.OracleParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeUsdToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSymbol",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeTokenInfo",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastUuid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeUsdToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSymbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTradeTokenInfo",
    data: BytesLike
  ): Result;
}

export interface MarketFacet extends BaseContract {
  connect(runner?: ContractRunner | null): MarketFacet;
  waitForDeployment(): Promise<this>;

  interface: MarketFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllSymbols: TypedContractMethod<
    [],
    [IMarket.SymbolInfoStructOutput[]],
    "view"
  >;

  getLastUuid: TypedContractMethod<[key: BytesLike], [bigint], "view">;

  getMarketInfo: TypedContractMethod<
    [code: BytesLike, oracles: OracleProcess.OracleParamStruct[]],
    [IMarket.MarketInfoStructOutput],
    "view"
  >;

  getStakeUsdToken: TypedContractMethod<[], [string], "view">;

  getSymbol: TypedContractMethod<
    [code: BytesLike],
    [IMarket.SymbolInfoStructOutput],
    "view"
  >;

  getTradeTokenInfo: TypedContractMethod<
    [token: AddressLike],
    [IMarket.TradeTokenInfoStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllSymbols"
  ): TypedContractMethod<[], [IMarket.SymbolInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getLastUuid"
  ): TypedContractMethod<[key: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMarketInfo"
  ): TypedContractMethod<
    [code: BytesLike, oracles: OracleProcess.OracleParamStruct[]],
    [IMarket.MarketInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakeUsdToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSymbol"
  ): TypedContractMethod<
    [code: BytesLike],
    [IMarket.SymbolInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTradeTokenInfo"
  ): TypedContractMethod<
    [token: AddressLike],
    [IMarket.TradeTokenInfoStructOutput],
    "view"
  >;

  filters: {};
}
