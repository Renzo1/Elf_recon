/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IStake {
  export type MintStakeTokenParamsStruct = {
    stakeToken: AddressLike;
    requestToken: AddressLike;
    requestTokenAmount: BigNumberish;
    walletRequestTokenAmount: BigNumberish;
    minStakeAmount: BigNumberish;
    executionFee: BigNumberish;
    isCollateral: boolean;
    isNativeToken: boolean;
  };

  export type MintStakeTokenParamsStructOutput = [
    stakeToken: string,
    requestToken: string,
    requestTokenAmount: bigint,
    walletRequestTokenAmount: bigint,
    minStakeAmount: bigint,
    executionFee: bigint,
    isCollateral: boolean,
    isNativeToken: boolean
  ] & {
    stakeToken: string;
    requestToken: string;
    requestTokenAmount: bigint;
    walletRequestTokenAmount: bigint;
    minStakeAmount: bigint;
    executionFee: bigint;
    isCollateral: boolean;
    isNativeToken: boolean;
  };

  export type RedeemStakeTokenParamsStruct = {
    receiver: AddressLike;
    stakeToken: AddressLike;
    redeemToken: AddressLike;
    unStakeAmount: BigNumberish;
    minRedeemAmount: BigNumberish;
    executionFee: BigNumberish;
  };

  export type RedeemStakeTokenParamsStructOutput = [
    receiver: string,
    stakeToken: string,
    redeemToken: string,
    unStakeAmount: bigint,
    minRedeemAmount: bigint,
    executionFee: bigint
  ] & {
    receiver: string;
    stakeToken: string;
    redeemToken: string;
    unStakeAmount: bigint;
    minRedeemAmount: bigint;
    executionFee: bigint;
  };
}

export declare namespace OracleProcess {
  export type OracleParamStruct = {
    token: AddressLike;
    targetToken: AddressLike;
    minPrice: BigNumberish;
    maxPrice: BigNumberish;
  };

  export type OracleParamStructOutput = [
    token: string,
    targetToken: string,
    minPrice: bigint,
    maxPrice: bigint
  ] & {
    token: string;
    targetToken: string;
    minPrice: bigint;
    maxPrice: bigint;
  };
}

export interface StakeFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelMintStakeToken"
      | "cancelRedeemStakeToken"
      | "createMintStakeTokenRequest"
      | "createRedeemStakeTokenRequest"
      | "executeMintStakeToken"
      | "executeRedeemStakeToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelMintStakeToken",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRedeemStakeToken",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createMintStakeTokenRequest",
    values: [IStake.MintStakeTokenParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createRedeemStakeTokenRequest",
    values: [IStake.RedeemStakeTokenParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMintStakeToken",
    values: [BigNumberish, OracleProcess.OracleParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRedeemStakeToken",
    values: [BigNumberish, OracleProcess.OracleParamStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelMintStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRedeemStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMintStakeTokenRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRedeemStakeTokenRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMintStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRedeemStakeToken",
    data: BytesLike
  ): Result;
}

export interface StakeFacet extends BaseContract {
  connect(runner?: ContractRunner | null): StakeFacet;
  waitForDeployment(): Promise<this>;

  interface: StakeFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelMintStakeToken: TypedContractMethod<
    [requestId: BigNumberish, reasonCode: BytesLike],
    [void],
    "nonpayable"
  >;

  cancelRedeemStakeToken: TypedContractMethod<
    [requestId: BigNumberish, reasonCode: BytesLike],
    [void],
    "nonpayable"
  >;

  createMintStakeTokenRequest: TypedContractMethod<
    [params: IStake.MintStakeTokenParamsStruct],
    [void],
    "payable"
  >;

  createRedeemStakeTokenRequest: TypedContractMethod<
    [params: IStake.RedeemStakeTokenParamsStruct],
    [void],
    "payable"
  >;

  executeMintStakeToken: TypedContractMethod<
    [requestId: BigNumberish, oracles: OracleProcess.OracleParamStruct[]],
    [void],
    "nonpayable"
  >;

  executeRedeemStakeToken: TypedContractMethod<
    [requestId: BigNumberish, oracles: OracleProcess.OracleParamStruct[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelMintStakeToken"
  ): TypedContractMethod<
    [requestId: BigNumberish, reasonCode: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelRedeemStakeToken"
  ): TypedContractMethod<
    [requestId: BigNumberish, reasonCode: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMintStakeTokenRequest"
  ): TypedContractMethod<
    [params: IStake.MintStakeTokenParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createRedeemStakeTokenRequest"
  ): TypedContractMethod<
    [params: IStake.RedeemStakeTokenParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeMintStakeToken"
  ): TypedContractMethod<
    [requestId: BigNumberish, oracles: OracleProcess.OracleParamStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeRedeemStakeToken"
  ): TypedContractMethod<
    [requestId: BigNumberish, oracles: OracleProcess.OracleParamStruct[]],
    [void],
    "nonpayable"
  >;

  filters: {};
}
