/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CommonDataInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllStakeTokens"
      | "getAllSymbols"
      | "getStakeUsdToken"
      | "isStakeTokenSupport"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CleanFundsUpdateEvent"
      | "LossExecutionFeeUpdateEvent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getAllStakeTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSymbols",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeUsdToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isStakeTokenSupport",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllStakeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeUsdToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStakeTokenSupport",
    data: BytesLike
  ): Result;
}

export namespace CleanFundsUpdateEventEvent {
  export type InputTuple = [
    token: AddressLike,
    preAmount: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, preAmount: bigint, amount: bigint];
  export interface OutputObject {
    token: string;
    preAmount: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LossExecutionFeeUpdateEventEvent {
  export type InputTuple = [preAmount: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [preAmount: bigint, amount: bigint];
  export interface OutputObject {
    preAmount: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CommonData extends BaseContract {
  connect(runner?: ContractRunner | null): CommonData;
  waitForDeployment(): Promise<this>;

  interface: CommonDataInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllStakeTokens: TypedContractMethod<[], [string[]], "view">;

  getAllSymbols: TypedContractMethod<[], [string[]], "view">;

  getStakeUsdToken: TypedContractMethod<[], [string], "view">;

  isStakeTokenSupport: TypedContractMethod<
    [stakeToken: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllStakeTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllSymbols"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getStakeUsdToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isStakeTokenSupport"
  ): TypedContractMethod<[stakeToken: AddressLike], [boolean], "view">;

  getEvent(
    key: "CleanFundsUpdateEvent"
  ): TypedContractEvent<
    CleanFundsUpdateEventEvent.InputTuple,
    CleanFundsUpdateEventEvent.OutputTuple,
    CleanFundsUpdateEventEvent.OutputObject
  >;
  getEvent(
    key: "LossExecutionFeeUpdateEvent"
  ): TypedContractEvent<
    LossExecutionFeeUpdateEventEvent.InputTuple,
    LossExecutionFeeUpdateEventEvent.OutputTuple,
    LossExecutionFeeUpdateEventEvent.OutputObject
  >;

  filters: {
    "CleanFundsUpdateEvent(address,uint256,uint256)": TypedContractEvent<
      CleanFundsUpdateEventEvent.InputTuple,
      CleanFundsUpdateEventEvent.OutputTuple,
      CleanFundsUpdateEventEvent.OutputObject
    >;
    CleanFundsUpdateEvent: TypedContractEvent<
      CleanFundsUpdateEventEvent.InputTuple,
      CleanFundsUpdateEventEvent.OutputTuple,
      CleanFundsUpdateEventEvent.OutputObject
    >;

    "LossExecutionFeeUpdateEvent(uint256,uint256)": TypedContractEvent<
      LossExecutionFeeUpdateEventEvent.InputTuple,
      LossExecutionFeeUpdateEventEvent.OutputTuple,
      LossExecutionFeeUpdateEventEvent.OutputObject
    >;
    LossExecutionFeeUpdateEvent: TypedContractEvent<
      LossExecutionFeeUpdateEventEvent.InputTuple,
      LossExecutionFeeUpdateEventEvent.OutputTuple,
      LossExecutionFeeUpdateEventEvent.OutputObject
    >;
  };
}
