/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace LiabilityClean {
  export type LiabilityCleanInfoStruct = {
    account: AddressLike;
    createTime: BigNumberish;
    liabilityTokens: AddressLike[];
    liabilities: BigNumberish[];
    collaterals: AddressLike[];
    collateralsAmount: BigNumberish[];
  };

  export type LiabilityCleanInfoStructOutput = [
    account: string,
    createTime: bigint,
    liabilityTokens: string[],
    liabilities: bigint[],
    collaterals: string[],
    collateralsAmount: bigint[]
  ] & {
    account: string;
    createTime: bigint;
    liabilityTokens: string[];
    liabilities: bigint[];
    collaterals: string[];
    collateralsAmount: bigint[];
  };
}

export interface LiabilityCleanInterface extends Interface {
  getFunction(
    nameOrSignature: "getAllCleanInfo" | "getCleanInfo"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "LiabilityCleanEvent"): EventFragment;

  encodeFunctionData(
    functionFragment: "getAllCleanInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCleanInfo",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllCleanInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCleanInfo",
    data: BytesLike
  ): Result;
}

export namespace LiabilityCleanEventEvent {
  export type InputTuple = [
    id: BigNumberish,
    info: LiabilityClean.LiabilityCleanInfoStruct
  ];
  export type OutputTuple = [
    id: bigint,
    info: LiabilityClean.LiabilityCleanInfoStructOutput
  ];
  export interface OutputObject {
    id: bigint;
    info: LiabilityClean.LiabilityCleanInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LiabilityClean extends BaseContract {
  connect(runner?: ContractRunner | null): LiabilityClean;
  waitForDeployment(): Promise<this>;

  interface: LiabilityCleanInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllCleanInfo: TypedContractMethod<
    [],
    [LiabilityClean.LiabilityCleanInfoStructOutput[]],
    "view"
  >;

  getCleanInfo: TypedContractMethod<
    [id: BigNumberish],
    [LiabilityClean.LiabilityCleanInfoStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllCleanInfo"
  ): TypedContractMethod<
    [],
    [LiabilityClean.LiabilityCleanInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCleanInfo"
  ): TypedContractMethod<
    [id: BigNumberish],
    [LiabilityClean.LiabilityCleanInfoStructOutput],
    "view"
  >;

  getEvent(
    key: "LiabilityCleanEvent"
  ): TypedContractEvent<
    LiabilityCleanEventEvent.InputTuple,
    LiabilityCleanEventEvent.OutputTuple,
    LiabilityCleanEventEvent.OutputObject
  >;

  filters: {
    "LiabilityCleanEvent(uint256,tuple)": TypedContractEvent<
      LiabilityCleanEventEvent.InputTuple,
      LiabilityCleanEventEvent.OutputTuple,
      LiabilityCleanEventEvent.OutputObject
    >;
    LiabilityCleanEvent: TypedContractEvent<
      LiabilityCleanEventEvent.InputTuple,
      LiabilityCleanEventEvent.OutputTuple,
      LiabilityCleanEventEvent.OutputObject
    >;
  };
}
