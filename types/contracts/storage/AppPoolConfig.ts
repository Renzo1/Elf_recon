/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace AppPoolConfig {
  export type LpPoolConfigStruct = {
    baseInterestRate: BigNumberish;
    poolLiquidityLimit: BigNumberish;
    mintFeeRate: BigNumberish;
    redeemFeeRate: BigNumberish;
    poolPnlRatioLimit: BigNumberish;
    unsettledBaseTokenRatioLimit: BigNumberish;
    unsettledStableTokenRatioLimit: BigNumberish;
    poolStableTokenRatioLimit: BigNumberish;
    poolStableTokenLossLimit: BigNumberish;
    assetTokens: AddressLike[];
  };

  export type LpPoolConfigStructOutput = [
    baseInterestRate: bigint,
    poolLiquidityLimit: bigint,
    mintFeeRate: bigint,
    redeemFeeRate: bigint,
    poolPnlRatioLimit: bigint,
    unsettledBaseTokenRatioLimit: bigint,
    unsettledStableTokenRatioLimit: bigint,
    poolStableTokenRatioLimit: bigint,
    poolStableTokenLossLimit: bigint,
    assetTokens: string[]
  ] & {
    baseInterestRate: bigint;
    poolLiquidityLimit: bigint;
    mintFeeRate: bigint;
    redeemFeeRate: bigint;
    poolPnlRatioLimit: bigint;
    unsettledBaseTokenRatioLimit: bigint;
    unsettledStableTokenRatioLimit: bigint;
    poolStableTokenRatioLimit: bigint;
    poolStableTokenLossLimit: bigint;
    assetTokens: string[];
  };

  export type StakeConfigStruct = {
    collateralProtectFactor: BigNumberish;
    collateralFactor: BigNumberish;
    minPrecisionMultiple: BigNumberish;
    mintFeeStakingRewardsRatio: BigNumberish;
    mintFeePoolRewardsRatio: BigNumberish;
    redeemFeeStakingRewardsRatio: BigNumberish;
    redeemFeePoolRewardsRatio: BigNumberish;
    poolRewardsIntervalLimit: BigNumberish;
    minApr: BigNumberish;
    maxApr: BigNumberish;
  };

  export type StakeConfigStructOutput = [
    collateralProtectFactor: bigint,
    collateralFactor: bigint,
    minPrecisionMultiple: bigint,
    mintFeeStakingRewardsRatio: bigint,
    mintFeePoolRewardsRatio: bigint,
    redeemFeeStakingRewardsRatio: bigint,
    redeemFeePoolRewardsRatio: bigint,
    poolRewardsIntervalLimit: bigint,
    minApr: bigint,
    maxApr: bigint
  ] & {
    collateralProtectFactor: bigint;
    collateralFactor: bigint;
    minPrecisionMultiple: bigint;
    mintFeeStakingRewardsRatio: bigint;
    mintFeePoolRewardsRatio: bigint;
    redeemFeeStakingRewardsRatio: bigint;
    redeemFeePoolRewardsRatio: bigint;
    poolRewardsIntervalLimit: bigint;
    minApr: bigint;
    maxApr: bigint;
  };

  export type UsdPoolConfigStruct = {
    poolLiquidityLimit: BigNumberish;
    mintFeeRate: BigNumberish;
    redeemFeeRate: BigNumberish;
    unsettledRatioLimit: BigNumberish;
    supportStableTokens: AddressLike[];
    stableTokensBorrowingInterestRate: BigNumberish[];
  };

  export type UsdPoolConfigStructOutput = [
    poolLiquidityLimit: bigint,
    mintFeeRate: bigint,
    redeemFeeRate: bigint,
    unsettledRatioLimit: bigint,
    supportStableTokens: string[],
    stableTokensBorrowingInterestRate: bigint[]
  ] & {
    poolLiquidityLimit: bigint;
    mintFeeRate: bigint;
    redeemFeeRate: bigint;
    unsettledRatioLimit: bigint;
    supportStableTokens: string[];
    stableTokensBorrowingInterestRate: bigint[];
  };
}

export interface AppPoolConfigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ASSET_TOKENS"
      | "BASE_INTEREST_RATE"
      | "COLLATERAL_FACTOR"
      | "COLLATERAL_PROTECT_FACTOR"
      | "MAX_APR"
      | "MINT_FEE_POOL_REWARDS_RATIO"
      | "MINT_FEE_RATE"
      | "MINT_FEE_STAKING_REWARDS_RATIO"
      | "MIN_APR"
      | "MIN_PRECISION_MULTIPLE"
      | "POOL_LIQUIDITY_LIMIT"
      | "POOL_PNL_RATIO_LIMIT"
      | "POOL_REWARDS_INTERVAL_LIMIT"
      | "POOL_STABLE_TOKEN_LOSS_LIMIT"
      | "POOL_STABLE_TOKEN_RATIO_LIMIT"
      | "REDEEM_FEE_POOL_REWARDS_RATIO"
      | "REDEEM_FEE_RATE"
      | "REDEEM_FEE_STAKING_REWARDS_RATIO"
      | "STABLE_TOKENS_BORROWING_INTEREST_RATE"
      | "SUPPORT_STABLE_TOKENS"
      | "UNSETTLED_BASE_TOKEN_RATIO_LIMIT"
      | "UNSETTLED_RATIO_LIMIT"
      | "UNSETTLED_STABLE_TOKEN_RATIO_LIMIT"
      | "getLpPoolConfig"
      | "getStableTokenBorrowingInterestRate"
      | "getStakeConfig"
      | "getUsdPoolConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ASSET_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_INTEREST_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COLLATERAL_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COLLATERAL_PROTECT_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_APR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MINT_FEE_POOL_REWARDS_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_FEE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_FEE_STAKING_REWARDS_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_APR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_PRECISION_MULTIPLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_LIQUIDITY_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_PNL_RATIO_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_REWARDS_INTERVAL_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_STABLE_TOKEN_LOSS_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_STABLE_TOKEN_RATIO_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REDEEM_FEE_POOL_REWARDS_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REDEEM_FEE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REDEEM_FEE_STAKING_REWARDS_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STABLE_TOKENS_BORROWING_INTEREST_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUPPORT_STABLE_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNSETTLED_BASE_TOKEN_RATIO_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNSETTLED_RATIO_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNSETTLED_STABLE_TOKEN_RATIO_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLpPoolConfig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStableTokenBorrowingInterestRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdPoolConfig",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ASSET_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASE_INTEREST_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COLLATERAL_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COLLATERAL_PROTECT_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_APR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINT_FEE_POOL_REWARDS_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINT_FEE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINT_FEE_STAKING_REWARDS_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_APR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PRECISION_MULTIPLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_LIQUIDITY_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_PNL_RATIO_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_REWARDS_INTERVAL_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_STABLE_TOKEN_LOSS_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_STABLE_TOKEN_RATIO_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REDEEM_FEE_POOL_REWARDS_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REDEEM_FEE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REDEEM_FEE_STAKING_REWARDS_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STABLE_TOKENS_BORROWING_INTEREST_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUPPORT_STABLE_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNSETTLED_BASE_TOKEN_RATIO_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNSETTLED_RATIO_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNSETTLED_STABLE_TOKEN_RATIO_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpPoolConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStableTokenBorrowingInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdPoolConfig",
    data: BytesLike
  ): Result;
}

export interface AppPoolConfig extends BaseContract {
  connect(runner?: ContractRunner | null): AppPoolConfig;
  waitForDeployment(): Promise<this>;

  interface: AppPoolConfigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ASSET_TOKENS: TypedContractMethod<[], [string], "view">;

  BASE_INTEREST_RATE: TypedContractMethod<[], [string], "view">;

  COLLATERAL_FACTOR: TypedContractMethod<[], [string], "view">;

  COLLATERAL_PROTECT_FACTOR: TypedContractMethod<[], [string], "view">;

  MAX_APR: TypedContractMethod<[], [string], "view">;

  MINT_FEE_POOL_REWARDS_RATIO: TypedContractMethod<[], [string], "view">;

  MINT_FEE_RATE: TypedContractMethod<[], [string], "view">;

  MINT_FEE_STAKING_REWARDS_RATIO: TypedContractMethod<[], [string], "view">;

  MIN_APR: TypedContractMethod<[], [string], "view">;

  MIN_PRECISION_MULTIPLE: TypedContractMethod<[], [string], "view">;

  POOL_LIQUIDITY_LIMIT: TypedContractMethod<[], [string], "view">;

  POOL_PNL_RATIO_LIMIT: TypedContractMethod<[], [string], "view">;

  POOL_REWARDS_INTERVAL_LIMIT: TypedContractMethod<[], [string], "view">;

  POOL_STABLE_TOKEN_LOSS_LIMIT: TypedContractMethod<[], [string], "view">;

  POOL_STABLE_TOKEN_RATIO_LIMIT: TypedContractMethod<[], [string], "view">;

  REDEEM_FEE_POOL_REWARDS_RATIO: TypedContractMethod<[], [string], "view">;

  REDEEM_FEE_RATE: TypedContractMethod<[], [string], "view">;

  REDEEM_FEE_STAKING_REWARDS_RATIO: TypedContractMethod<[], [string], "view">;

  STABLE_TOKENS_BORROWING_INTEREST_RATE: TypedContractMethod<
    [],
    [string],
    "view"
  >;

  SUPPORT_STABLE_TOKENS: TypedContractMethod<[], [string], "view">;

  UNSETTLED_BASE_TOKEN_RATIO_LIMIT: TypedContractMethod<[], [string], "view">;

  UNSETTLED_RATIO_LIMIT: TypedContractMethod<[], [string], "view">;

  UNSETTLED_STABLE_TOKEN_RATIO_LIMIT: TypedContractMethod<[], [string], "view">;

  getLpPoolConfig: TypedContractMethod<
    [stakeToken: AddressLike],
    [AppPoolConfig.LpPoolConfigStructOutput],
    "view"
  >;

  getStableTokenBorrowingInterestRate: TypedContractMethod<
    [stableToken: AddressLike],
    [bigint],
    "view"
  >;

  getStakeConfig: TypedContractMethod<
    [],
    [AppPoolConfig.StakeConfigStructOutput],
    "view"
  >;

  getUsdPoolConfig: TypedContractMethod<
    [],
    [AppPoolConfig.UsdPoolConfigStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ASSET_TOKENS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BASE_INTEREST_RATE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "COLLATERAL_FACTOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "COLLATERAL_PROTECT_FACTOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_APR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINT_FEE_POOL_REWARDS_RATIO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINT_FEE_RATE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINT_FEE_STAKING_REWARDS_RATIO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MIN_APR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MIN_PRECISION_MULTIPLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POOL_LIQUIDITY_LIMIT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POOL_PNL_RATIO_LIMIT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POOL_REWARDS_INTERVAL_LIMIT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POOL_STABLE_TOKEN_LOSS_LIMIT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POOL_STABLE_TOKEN_RATIO_LIMIT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REDEEM_FEE_POOL_REWARDS_RATIO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REDEEM_FEE_RATE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REDEEM_FEE_STAKING_REWARDS_RATIO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STABLE_TOKENS_BORROWING_INTEREST_RATE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SUPPORT_STABLE_TOKENS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UNSETTLED_BASE_TOKEN_RATIO_LIMIT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UNSETTLED_RATIO_LIMIT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UNSETTLED_STABLE_TOKEN_RATIO_LIMIT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLpPoolConfig"
  ): TypedContractMethod<
    [stakeToken: AddressLike],
    [AppPoolConfig.LpPoolConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStableTokenBorrowingInterestRate"
  ): TypedContractMethod<[stableToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStakeConfig"
  ): TypedContractMethod<[], [AppPoolConfig.StakeConfigStructOutput], "view">;
  getFunction(
    nameOrSignature: "getUsdPoolConfig"
  ): TypedContractMethod<[], [AppPoolConfig.UsdPoolConfigStructOutput], "view">;

  filters: {};
}
