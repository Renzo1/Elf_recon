/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace AppTradeTokenConfig {
  export type TradeTokenConfigStruct = {
    isSupportCollateral: boolean;
    precision: BigNumberish;
    discount: BigNumberish;
    collateralUserCap: BigNumberish;
    collateralTotalCap: BigNumberish;
    liabilityUserCap: BigNumberish;
    liabilityTotalCap: BigNumberish;
    interestRateFactor: BigNumberish;
    liquidationFactor: BigNumberish;
  };

  export type TradeTokenConfigStructOutput = [
    isSupportCollateral: boolean,
    precision: bigint,
    discount: bigint,
    collateralUserCap: bigint,
    collateralTotalCap: bigint,
    liabilityUserCap: bigint,
    liabilityTotalCap: bigint,
    interestRateFactor: bigint,
    liquidationFactor: bigint
  ] & {
    isSupportCollateral: boolean;
    precision: bigint;
    discount: bigint;
    collateralUserCap: bigint;
    collateralTotalCap: bigint;
    liabilityUserCap: bigint;
    liabilityTotalCap: bigint;
    interestRateFactor: bigint;
    liquidationFactor: bigint;
  };
}

export declare namespace AppTradeConfig {
  export type TradeConfigStruct = {
    tradeTokens: AddressLike[];
    tradeTokenConfigs: AppTradeTokenConfig.TradeTokenConfigStruct[];
    minOrderMarginUSD: BigNumberish;
    availableCollateralRatio: BigNumberish;
    crossLtvLimit: BigNumberish;
    maxMaintenanceMarginRate: BigNumberish;
    fundingFeeBaseRate: BigNumberish;
    maxFundingBaseRate: BigNumberish;
    tradingFeeStakingRewardsRatio: BigNumberish;
    tradingFeePoolRewardsRatio: BigNumberish;
    tradingFeeUsdPoolRewardsRatio: BigNumberish;
    borrowingFeeStakingRewardsRatio: BigNumberish;
    borrowingFeePoolRewardsRatio: BigNumberish;
    autoReduceProfitFactor: BigNumberish;
    autoReduceLiquidityFactor: BigNumberish;
    swapSlipperTokenFactor: BigNumberish;
  };

  export type TradeConfigStructOutput = [
    tradeTokens: string[],
    tradeTokenConfigs: AppTradeTokenConfig.TradeTokenConfigStructOutput[],
    minOrderMarginUSD: bigint,
    availableCollateralRatio: bigint,
    crossLtvLimit: bigint,
    maxMaintenanceMarginRate: bigint,
    fundingFeeBaseRate: bigint,
    maxFundingBaseRate: bigint,
    tradingFeeStakingRewardsRatio: bigint,
    tradingFeePoolRewardsRatio: bigint,
    tradingFeeUsdPoolRewardsRatio: bigint,
    borrowingFeeStakingRewardsRatio: bigint,
    borrowingFeePoolRewardsRatio: bigint,
    autoReduceProfitFactor: bigint,
    autoReduceLiquidityFactor: bigint,
    swapSlipperTokenFactor: bigint
  ] & {
    tradeTokens: string[];
    tradeTokenConfigs: AppTradeTokenConfig.TradeTokenConfigStructOutput[];
    minOrderMarginUSD: bigint;
    availableCollateralRatio: bigint;
    crossLtvLimit: bigint;
    maxMaintenanceMarginRate: bigint;
    fundingFeeBaseRate: bigint;
    maxFundingBaseRate: bigint;
    tradingFeeStakingRewardsRatio: bigint;
    tradingFeePoolRewardsRatio: bigint;
    tradingFeeUsdPoolRewardsRatio: bigint;
    borrowingFeeStakingRewardsRatio: bigint;
    borrowingFeePoolRewardsRatio: bigint;
    autoReduceProfitFactor: bigint;
    autoReduceLiquidityFactor: bigint;
    swapSlipperTokenFactor: bigint;
  };
}

export interface AppTradeConfigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUTO_REDUCE_LIQUIDITY_FACTOR"
      | "AUTO_REDUCE_PROFIT_FACTOR"
      | "AVAILABLE_COLLATERAL_RATIO"
      | "BORROWING_FEE_POOL_REWARDS_RATIO"
      | "BORROWING_FEE_STAKING_REWARDS_RATIO"
      | "CROSS_LTV_LIMIT"
      | "FUNDING_FEE_BASE_RATE"
      | "MAX_FUNDING_BASE_RATE"
      | "MAX_MAINTENANCE_MARGIN_RATE"
      | "MIN_ORDER_MARGIN_USD"
      | "SWAP_SLIPPER_TOKEN_FACTOR"
      | "TRADE_TOKENS"
      | "TRADING_FEE_POOL_REWARDS_RATIO"
      | "TRADING_FEE_STAKING_REWARDS_RATIO"
      | "TRADING_FEE_USD_POOL_REWARDS_RATIO"
      | "getTradeConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AUTO_REDUCE_LIQUIDITY_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUTO_REDUCE_PROFIT_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AVAILABLE_COLLATERAL_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BORROWING_FEE_POOL_REWARDS_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BORROWING_FEE_STAKING_REWARDS_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CROSS_LTV_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FUNDING_FEE_BASE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FUNDING_BASE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_MAINTENANCE_MARGIN_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_ORDER_MARGIN_USD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SWAP_SLIPPER_TOKEN_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRADE_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRADING_FEE_POOL_REWARDS_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRADING_FEE_STAKING_REWARDS_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRADING_FEE_USD_POOL_REWARDS_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeConfig",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "AUTO_REDUCE_LIQUIDITY_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AUTO_REDUCE_PROFIT_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AVAILABLE_COLLATERAL_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BORROWING_FEE_POOL_REWARDS_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BORROWING_FEE_STAKING_REWARDS_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CROSS_LTV_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FUNDING_FEE_BASE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FUNDING_BASE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_MAINTENANCE_MARGIN_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_ORDER_MARGIN_USD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SWAP_SLIPPER_TOKEN_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRADE_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRADING_FEE_POOL_REWARDS_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRADING_FEE_STAKING_REWARDS_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRADING_FEE_USD_POOL_REWARDS_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeConfig",
    data: BytesLike
  ): Result;
}

export interface AppTradeConfig extends BaseContract {
  connect(runner?: ContractRunner | null): AppTradeConfig;
  waitForDeployment(): Promise<this>;

  interface: AppTradeConfigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUTO_REDUCE_LIQUIDITY_FACTOR: TypedContractMethod<[], [string], "view">;

  AUTO_REDUCE_PROFIT_FACTOR: TypedContractMethod<[], [string], "view">;

  AVAILABLE_COLLATERAL_RATIO: TypedContractMethod<[], [string], "view">;

  BORROWING_FEE_POOL_REWARDS_RATIO: TypedContractMethod<[], [string], "view">;

  BORROWING_FEE_STAKING_REWARDS_RATIO: TypedContractMethod<
    [],
    [string],
    "view"
  >;

  CROSS_LTV_LIMIT: TypedContractMethod<[], [string], "view">;

  FUNDING_FEE_BASE_RATE: TypedContractMethod<[], [string], "view">;

  MAX_FUNDING_BASE_RATE: TypedContractMethod<[], [string], "view">;

  MAX_MAINTENANCE_MARGIN_RATE: TypedContractMethod<[], [string], "view">;

  MIN_ORDER_MARGIN_USD: TypedContractMethod<[], [string], "view">;

  SWAP_SLIPPER_TOKEN_FACTOR: TypedContractMethod<[], [string], "view">;

  TRADE_TOKENS: TypedContractMethod<[], [string], "view">;

  TRADING_FEE_POOL_REWARDS_RATIO: TypedContractMethod<[], [string], "view">;

  TRADING_FEE_STAKING_REWARDS_RATIO: TypedContractMethod<[], [string], "view">;

  TRADING_FEE_USD_POOL_REWARDS_RATIO: TypedContractMethod<[], [string], "view">;

  getTradeConfig: TypedContractMethod<
    [],
    [AppTradeConfig.TradeConfigStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUTO_REDUCE_LIQUIDITY_FACTOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "AUTO_REDUCE_PROFIT_FACTOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "AVAILABLE_COLLATERAL_RATIO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BORROWING_FEE_POOL_REWARDS_RATIO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BORROWING_FEE_STAKING_REWARDS_RATIO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CROSS_LTV_LIMIT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FUNDING_FEE_BASE_RATE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_FUNDING_BASE_RATE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_MAINTENANCE_MARGIN_RATE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MIN_ORDER_MARGIN_USD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SWAP_SLIPPER_TOKEN_FACTOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TRADE_TOKENS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TRADING_FEE_POOL_REWARDS_RATIO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TRADING_FEE_STAKING_REWARDS_RATIO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TRADING_FEE_USD_POOL_REWARDS_RATIO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTradeConfig"
  ): TypedContractMethod<[], [AppTradeConfig.TradeConfigStructOutput], "view">;

  filters: {};
}
