/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export declare namespace FeeRewards {
  export type CumulativeRewardsPerStakeTokenDataStruct = {
    cumulativeRewardsPerStakeToken: BigNumberish;
    feeAmount: BigNumberish;
    totalSupply: BigNumberish;
  };

  export type CumulativeRewardsPerStakeTokenDataStructOutput = [
    cumulativeRewardsPerStakeToken: bigint,
    feeAmount: bigint,
    totalSupply: bigint
  ] & {
    cumulativeRewardsPerStakeToken: bigint;
    feeAmount: bigint;
    totalSupply: bigint;
  };
}

export interface FeeRewardsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic: "UpdateFeeRewardsCumulativeEvent"
  ): EventFragment;
}

export namespace UpdateFeeRewardsCumulativeEventEvent {
  export type InputTuple = [
    stakeTokens: AddressLike[],
    cumulativeRewardsPerStakeToken: FeeRewards.CumulativeRewardsPerStakeTokenDataStruct[]
  ];
  export type OutputTuple = [
    stakeTokens: string[],
    cumulativeRewardsPerStakeToken: FeeRewards.CumulativeRewardsPerStakeTokenDataStructOutput[]
  ];
  export interface OutputObject {
    stakeTokens: string[];
    cumulativeRewardsPerStakeToken: FeeRewards.CumulativeRewardsPerStakeTokenDataStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FeeRewards extends BaseContract {
  connect(runner?: ContractRunner | null): FeeRewards;
  waitForDeployment(): Promise<this>;

  interface: FeeRewardsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "UpdateFeeRewardsCumulativeEvent"
  ): TypedContractEvent<
    UpdateFeeRewardsCumulativeEventEvent.InputTuple,
    UpdateFeeRewardsCumulativeEventEvent.OutputTuple,
    UpdateFeeRewardsCumulativeEventEvent.OutputObject
  >;

  filters: {
    "UpdateFeeRewardsCumulativeEvent(address[],tuple[])": TypedContractEvent<
      UpdateFeeRewardsCumulativeEventEvent.InputTuple,
      UpdateFeeRewardsCumulativeEventEvent.OutputTuple,
      UpdateFeeRewardsCumulativeEventEvent.OutputObject
    >;
    UpdateFeeRewardsCumulativeEvent: TypedContractEvent<
      UpdateFeeRewardsCumulativeEventEvent.InputTuple,
      UpdateFeeRewardsCumulativeEventEvent.OutputTuple,
      UpdateFeeRewardsCumulativeEventEvent.OutputObject
    >;
  };
}
