/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PermissionFlagInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ALL_PERMISSION_FLAG"
      | "BURN_PERMISSION_FLAG"
      | "DEPOSIT_PERMISSION_FLAG"
      | "MINT_PERMISSION_FLAG"
      | "ORDER_PERMISSION_FLAG"
      | "WITHDRAW_PERMISSION_FLAG"
      | "isAllowed"
      | "isDenied"
      | "validDenied"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ALL_PERMISSION_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BURN_PERMISSION_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEPOSIT_PERMISSION_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_PERMISSION_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORDER_PERMISSION_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAW_PERMISSION_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowed",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDenied",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validDenied",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ALL_PERMISSION_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BURN_PERMISSION_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEPOSIT_PERMISSION_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINT_PERMISSION_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORDER_PERMISSION_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAW_PERMISSION_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDenied", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validDenied",
    data: BytesLike
  ): Result;
}

export interface PermissionFlag extends BaseContract {
  connect(runner?: ContractRunner | null): PermissionFlag;
  waitForDeployment(): Promise<this>;

  interface: PermissionFlagInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ALL_PERMISSION_FLAG: TypedContractMethod<[], [string], "view">;

  BURN_PERMISSION_FLAG: TypedContractMethod<[], [string], "view">;

  DEPOSIT_PERMISSION_FLAG: TypedContractMethod<[], [string], "view">;

  MINT_PERMISSION_FLAG: TypedContractMethod<[], [string], "view">;

  ORDER_PERMISSION_FLAG: TypedContractMethod<[], [string], "view">;

  WITHDRAW_PERMISSION_FLAG: TypedContractMethod<[], [string], "view">;

  isAllowed: TypedContractMethod<
    [featureKey: BytesLike, to: AddressLike],
    [boolean],
    "view"
  >;

  isDenied: TypedContractMethod<
    [featureKey: BytesLike, to: AddressLike],
    [boolean],
    "view"
  >;

  validDenied: TypedContractMethod<
    [featureKey: BytesLike, to: AddressLike],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ALL_PERMISSION_FLAG"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BURN_PERMISSION_FLAG"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEPOSIT_PERMISSION_FLAG"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINT_PERMISSION_FLAG"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ORDER_PERMISSION_FLAG"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WITHDRAW_PERMISSION_FLAG"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isAllowed"
  ): TypedContractMethod<
    [featureKey: BytesLike, to: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isDenied"
  ): TypedContractMethod<
    [featureKey: BytesLike, to: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "validDenied"
  ): TypedContractMethod<
    [featureKey: BytesLike, to: AddressLike],
    [void],
    "view"
  >;

  filters: {};
}
