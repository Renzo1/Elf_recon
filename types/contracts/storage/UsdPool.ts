/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace UsdPool {
  export type BorrowingFeeStruct = {
    totalBorrowingFee: BigNumberish;
    totalRealizedBorrowingFee: BigNumberish;
    cumulativeBorrowingFeePerToken: BigNumberish;
    lastUpdateTime: BigNumberish;
  };

  export type BorrowingFeeStructOutput = [
    totalBorrowingFee: bigint,
    totalRealizedBorrowingFee: bigint,
    cumulativeBorrowingFeePerToken: bigint,
    lastUpdateTime: bigint
  ] & {
    totalBorrowingFee: bigint;
    totalRealizedBorrowingFee: bigint;
    cumulativeBorrowingFeePerToken: bigint;
    lastUpdateTime: bigint;
  };
}

export interface UsdPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getPoolLiquidityLimit"
      | "getSupportedStableTokens"
      | "isSupportStableToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "UsdPoolBorrowingFeeUpdateEvent"
      | "UsdPoolTokenUpdateEvent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getPoolLiquidityLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedStableTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportStableToken",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPoolLiquidityLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedStableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportStableToken",
    data: BytesLike
  ): Result;
}

export namespace UsdPoolBorrowingFeeUpdateEventEvent {
  export type InputTuple = [borrowingFee: UsdPool.BorrowingFeeStruct];
  export type OutputTuple = [borrowingFee: UsdPool.BorrowingFeeStructOutput];
  export interface OutputObject {
    borrowingFee: UsdPool.BorrowingFeeStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UsdPoolTokenUpdateEventEvent {
  export type InputTuple = [
    token: AddressLike,
    preAmount: BigNumberish,
    preHoldAmount: BigNumberish,
    preUnsettledAmount: BigNumberish,
    amount: BigNumberish,
    holdAmount: BigNumberish,
    unsettledAmount: BigNumberish,
    updateBlock: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    preAmount: bigint,
    preHoldAmount: bigint,
    preUnsettledAmount: bigint,
    amount: bigint,
    holdAmount: bigint,
    unsettledAmount: bigint,
    updateBlock: bigint
  ];
  export interface OutputObject {
    token: string;
    preAmount: bigint;
    preHoldAmount: bigint;
    preUnsettledAmount: bigint;
    amount: bigint;
    holdAmount: bigint;
    unsettledAmount: bigint;
    updateBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UsdPool extends BaseContract {
  connect(runner?: ContractRunner | null): UsdPool;
  waitForDeployment(): Promise<this>;

  interface: UsdPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPoolLiquidityLimit: TypedContractMethod<[], [bigint], "view">;

  getSupportedStableTokens: TypedContractMethod<[], [string[]], "view">;

  isSupportStableToken: TypedContractMethod<
    [stableToken: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPoolLiquidityLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSupportedStableTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isSupportStableToken"
  ): TypedContractMethod<[stableToken: AddressLike], [boolean], "view">;

  getEvent(
    key: "UsdPoolBorrowingFeeUpdateEvent"
  ): TypedContractEvent<
    UsdPoolBorrowingFeeUpdateEventEvent.InputTuple,
    UsdPoolBorrowingFeeUpdateEventEvent.OutputTuple,
    UsdPoolBorrowingFeeUpdateEventEvent.OutputObject
  >;
  getEvent(
    key: "UsdPoolTokenUpdateEvent"
  ): TypedContractEvent<
    UsdPoolTokenUpdateEventEvent.InputTuple,
    UsdPoolTokenUpdateEventEvent.OutputTuple,
    UsdPoolTokenUpdateEventEvent.OutputObject
  >;

  filters: {
    "UsdPoolBorrowingFeeUpdateEvent(tuple)": TypedContractEvent<
      UsdPoolBorrowingFeeUpdateEventEvent.InputTuple,
      UsdPoolBorrowingFeeUpdateEventEvent.OutputTuple,
      UsdPoolBorrowingFeeUpdateEventEvent.OutputObject
    >;
    UsdPoolBorrowingFeeUpdateEvent: TypedContractEvent<
      UsdPoolBorrowingFeeUpdateEventEvent.InputTuple,
      UsdPoolBorrowingFeeUpdateEventEvent.OutputTuple,
      UsdPoolBorrowingFeeUpdateEventEvent.OutputObject
    >;

    "UsdPoolTokenUpdateEvent(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      UsdPoolTokenUpdateEventEvent.InputTuple,
      UsdPoolTokenUpdateEventEvent.OutputTuple,
      UsdPoolTokenUpdateEventEvent.OutputObject
    >;
    UsdPoolTokenUpdateEvent: TypedContractEvent<
      UsdPoolTokenUpdateEventEvent.InputTuple,
      UsdPoolTokenUpdateEventEvent.OutputTuple,
      UsdPoolTokenUpdateEventEvent.OutputObject
    >;
  };
}
