/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ReferralInterface extends Interface {
  getFunction(
    nameOrSignature: "REFERRAL_CODE" | "getCodeAccount" | "isCodeExists"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ReferralUpdateEvent"): EventFragment;

  encodeFunctionData(
    functionFragment: "REFERRAL_CODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCodeAccount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCodeExists",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "REFERRAL_CODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCodeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCodeExists",
    data: BytesLike
  ): Result;
}

export namespace ReferralUpdateEventEvent {
  export type InputTuple = [
    account: AddressLike,
    code: BytesLike,
    referralCode: BytesLike
  ];
  export type OutputTuple = [
    account: string,
    code: string,
    referralCode: string
  ];
  export interface OutputObject {
    account: string;
    code: string;
    referralCode: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Referral extends BaseContract {
  connect(runner?: ContractRunner | null): Referral;
  waitForDeployment(): Promise<this>;

  interface: ReferralInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  REFERRAL_CODE: TypedContractMethod<[], [string], "view">;

  getCodeAccount: TypedContractMethod<[code: BytesLike], [string], "view">;

  isCodeExists: TypedContractMethod<[code: BytesLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "REFERRAL_CODE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCodeAccount"
  ): TypedContractMethod<[code: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "isCodeExists"
  ): TypedContractMethod<[code: BytesLike], [boolean], "view">;

  getEvent(
    key: "ReferralUpdateEvent"
  ): TypedContractEvent<
    ReferralUpdateEventEvent.InputTuple,
    ReferralUpdateEventEvent.OutputTuple,
    ReferralUpdateEventEvent.OutputObject
  >;

  filters: {
    "ReferralUpdateEvent(address,bytes32,bytes32)": TypedContractEvent<
      ReferralUpdateEventEvent.InputTuple,
      ReferralUpdateEventEvent.OutputTuple,
      ReferralUpdateEventEvent.OutputObject
    >;
    ReferralUpdateEvent: TypedContractEvent<
      ReferralUpdateEventEvent.InputTuple,
      ReferralUpdateEventEvent.OutputTuple,
      ReferralUpdateEventEvent.OutputObject
    >;
  };
}
