/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface InsuranceFundInterface extends Interface {
  getEvent(nameOrSignatureOrTopic: "FundsUpdateEvent"): EventFragment;
}

export namespace FundsUpdateEventEvent {
  export type InputTuple = [
    stakeToken: AddressLike,
    token: AddressLike,
    preAmount: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    stakeToken: string,
    token: string,
    preAmount: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    stakeToken: string;
    token: string;
    preAmount: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface InsuranceFund extends BaseContract {
  connect(runner?: ContractRunner | null): InsuranceFund;
  waitForDeployment(): Promise<this>;

  interface: InsuranceFundInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "FundsUpdateEvent"
  ): TypedContractEvent<
    FundsUpdateEventEvent.InputTuple,
    FundsUpdateEventEvent.OutputTuple,
    FundsUpdateEventEvent.OutputObject
  >;

  filters: {
    "FundsUpdateEvent(address,address,uint256,uint256)": TypedContractEvent<
      FundsUpdateEventEvent.InputTuple,
      FundsUpdateEventEvent.OutputTuple,
      FundsUpdateEventEvent.OutputObject
    >;
    FundsUpdateEvent: TypedContractEvent<
      FundsUpdateEventEvent.InputTuple,
      FundsUpdateEventEvent.OutputTuple,
      FundsUpdateEventEvent.OutputObject
    >;
  };
}
