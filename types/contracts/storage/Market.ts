/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export declare namespace Market {
  export type FundingFeeStruct = {
    longFundingFeePerQty: BigNumberish;
    shortFundingFeePerQty: BigNumberish;
    totalLongFundingFee: BigNumberish;
    totalShortFundingFee: BigNumberish;
    longFundingFeeRate: BigNumberish;
    shortFundingFeeRate: BigNumberish;
    lastUpdateTime: BigNumberish;
  };

  export type FundingFeeStructOutput = [
    longFundingFeePerQty: bigint,
    shortFundingFeePerQty: bigint,
    totalLongFundingFee: bigint,
    totalShortFundingFee: bigint,
    longFundingFeeRate: bigint,
    shortFundingFeeRate: bigint,
    lastUpdateTime: bigint
  ] & {
    longFundingFeePerQty: bigint;
    shortFundingFeePerQty: bigint;
    totalLongFundingFee: bigint;
    totalShortFundingFee: bigint;
    longFundingFeeRate: bigint;
    shortFundingFeeRate: bigint;
    lastUpdateTime: bigint;
  };
}

export interface MarketInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic: "MarketFundingFeeUpdateEvent"
  ): EventFragment;
}

export namespace MarketFundingFeeUpdateEventEvent {
  export type InputTuple = [
    symbol: BytesLike,
    fundingFee: Market.FundingFeeStruct
  ];
  export type OutputTuple = [
    symbol: string,
    fundingFee: Market.FundingFeeStructOutput
  ];
  export interface OutputObject {
    symbol: string;
    fundingFee: Market.FundingFeeStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Market extends BaseContract {
  connect(runner?: ContractRunner | null): Market;
  waitForDeployment(): Promise<this>;

  interface: MarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "MarketFundingFeeUpdateEvent"
  ): TypedContractEvent<
    MarketFundingFeeUpdateEventEvent.InputTuple,
    MarketFundingFeeUpdateEventEvent.OutputTuple,
    MarketFundingFeeUpdateEventEvent.OutputObject
  >;

  filters: {
    "MarketFundingFeeUpdateEvent(bytes32,tuple)": TypedContractEvent<
      MarketFundingFeeUpdateEventEvent.InputTuple,
      MarketFundingFeeUpdateEventEvent.OutputTuple,
      MarketFundingFeeUpdateEventEvent.OutputObject
    >;
    MarketFundingFeeUpdateEvent: TypedContractEvent<
      MarketFundingFeeUpdateEventEvent.InputTuple,
      MarketFundingFeeUpdateEventEvent.OutputTuple,
      MarketFundingFeeUpdateEventEvent.OutputObject
    >;
  };
}
