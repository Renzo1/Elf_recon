/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Position {
  export type PositionFeeStruct = {
    closeFeeInUsd: BigNumberish;
    openBorrowingFeePerToken: BigNumberish;
    realizedBorrowingFee: BigNumberish;
    realizedBorrowingFeeInUsd: BigNumberish;
    openFundingFeePerQty: BigNumberish;
    realizedFundingFee: BigNumberish;
    realizedFundingFeeInUsd: BigNumberish;
  };

  export type PositionFeeStructOutput = [
    closeFeeInUsd: bigint,
    openBorrowingFeePerToken: bigint,
    realizedBorrowingFee: bigint,
    realizedBorrowingFeeInUsd: bigint,
    openFundingFeePerQty: bigint,
    realizedFundingFee: bigint,
    realizedFundingFeeInUsd: bigint
  ] & {
    closeFeeInUsd: bigint;
    openBorrowingFeePerToken: bigint;
    realizedBorrowingFee: bigint;
    realizedBorrowingFeeInUsd: bigint;
    openFundingFeePerQty: bigint;
    realizedFundingFee: bigint;
    realizedFundingFeeInUsd: bigint;
  };

  export type PropsStruct = {
    key: BytesLike;
    symbol: BytesLike;
    isLong: boolean;
    isCrossMargin: boolean;
    account: AddressLike;
    marginToken: AddressLike;
    indexToken: AddressLike;
    qty: BigNumberish;
    entryPrice: BigNumberish;
    leverage: BigNumberish;
    initialMargin: BigNumberish;
    initialMarginInUsd: BigNumberish;
    initialMarginInUsdFromBalance: BigNumberish;
    holdPoolAmount: BigNumberish;
    positionFee: Position.PositionFeeStruct;
    realizedPnl: BigNumberish;
    lastUpdateTime: BigNumberish;
  };

  export type PropsStructOutput = [
    key: string,
    symbol: string,
    isLong: boolean,
    isCrossMargin: boolean,
    account: string,
    marginToken: string,
    indexToken: string,
    qty: bigint,
    entryPrice: bigint,
    leverage: bigint,
    initialMargin: bigint,
    initialMarginInUsd: bigint,
    initialMarginInUsdFromBalance: bigint,
    holdPoolAmount: bigint,
    positionFee: Position.PositionFeeStructOutput,
    realizedPnl: bigint,
    lastUpdateTime: bigint
  ] & {
    key: string;
    symbol: string;
    isLong: boolean;
    isCrossMargin: boolean;
    account: string;
    marginToken: string;
    indexToken: string;
    qty: bigint;
    entryPrice: bigint;
    leverage: bigint;
    initialMargin: bigint;
    initialMarginInUsd: bigint;
    initialMarginInUsdFromBalance: bigint;
    holdPoolAmount: bigint;
    positionFee: Position.PositionFeeStructOutput;
    realizedPnl: bigint;
    lastUpdateTime: bigint;
  };

  export type SettleDataStruct = {
    executePrice: BigNumberish;
    openFee: BigNumberish;
    marginTokenPrice: BigNumberish;
    settledMargin: BigNumberish;
    settledBorrowingFee: BigNumberish;
    settledBorrowingFeeInUsd: BigNumberish;
    settledFundingFee: BigNumberish;
    settledFundingFeeInUsd: BigNumberish;
    unHoldPoolAmount: BigNumberish;
    closeFee: BigNumberish;
    closeFeeInUsd: BigNumberish;
    realizedPnl: BigNumberish;
    poolPnlToken: BigNumberish;
  };

  export type SettleDataStructOutput = [
    executePrice: bigint,
    openFee: bigint,
    marginTokenPrice: bigint,
    settledMargin: bigint,
    settledBorrowingFee: bigint,
    settledBorrowingFeeInUsd: bigint,
    settledFundingFee: bigint,
    settledFundingFeeInUsd: bigint,
    unHoldPoolAmount: bigint,
    closeFee: bigint,
    closeFeeInUsd: bigint,
    realizedPnl: bigint,
    poolPnlToken: bigint
  ] & {
    executePrice: bigint;
    openFee: bigint;
    marginTokenPrice: bigint;
    settledMargin: bigint;
    settledBorrowingFee: bigint;
    settledBorrowingFeeInUsd: bigint;
    settledFundingFee: bigint;
    settledFundingFeeInUsd: bigint;
    unHoldPoolAmount: bigint;
    closeFee: bigint;
    closeFeeInUsd: bigint;
    realizedPnl: bigint;
    poolPnlToken: bigint;
  };
}

export interface PositionInterface extends Interface {
  getFunction(nameOrSignature: "getPositionKey"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PositionUpdateEvent"): EventFragment;

  encodeFunctionData(
    functionFragment: "getPositionKey",
    values: [AddressLike, BytesLike, AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPositionKey",
    data: BytesLike
  ): Result;
}

export namespace PositionUpdateEventEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    positionKey: BytesLike,
    from: BigNumberish,
    position: Position.PropsStruct,
    settleData: Position.SettleDataStruct
  ];
  export type OutputTuple = [
    requestId: bigint,
    positionKey: string,
    from: bigint,
    position: Position.PropsStructOutput,
    settleData: Position.SettleDataStructOutput
  ];
  export interface OutputObject {
    requestId: bigint;
    positionKey: string;
    from: bigint;
    position: Position.PropsStructOutput;
    settleData: Position.SettleDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Position extends BaseContract {
  connect(runner?: ContractRunner | null): Position;
  waitForDeployment(): Promise<this>;

  interface: PositionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPositionKey: TypedContractMethod<
    [
      account: AddressLike,
      symbol: BytesLike,
      marginToken: AddressLike,
      isCrossMargin: boolean
    ],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPositionKey"
  ): TypedContractMethod<
    [
      account: AddressLike,
      symbol: BytesLike,
      marginToken: AddressLike,
      isCrossMargin: boolean
    ],
    [string],
    "view"
  >;

  getEvent(
    key: "PositionUpdateEvent"
  ): TypedContractEvent<
    PositionUpdateEventEvent.InputTuple,
    PositionUpdateEventEvent.OutputTuple,
    PositionUpdateEventEvent.OutputObject
  >;

  filters: {
    "PositionUpdateEvent(uint256,bytes32,uint8,tuple,tuple)": TypedContractEvent<
      PositionUpdateEventEvent.InputTuple,
      PositionUpdateEventEvent.OutputTuple,
      PositionUpdateEventEvent.OutputObject
    >;
    PositionUpdateEvent: TypedContractEvent<
      PositionUpdateEventEvent.InputTuple,
      PositionUpdateEventEvent.OutputTuple,
      PositionUpdateEventEvent.OutputObject
    >;
  };
}
