/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace OracleProcess {
  export type OracleParamStruct = {
    token: AddressLike;
    targetToken: AddressLike;
    minPrice: BigNumberish;
    maxPrice: BigNumberish;
  };

  export type OracleParamStructOutput = [
    token: string,
    targetToken: string,
    minPrice: bigint,
    maxPrice: bigint
  ] & {
    token: string;
    targetToken: string;
    minPrice: bigint;
    maxPrice: bigint;
  };
}

export declare namespace IFee {
  export type AccountFeeRewardsStruct = {
    account: AddressLike;
    stakeTokens: AddressLike[];
    tokens: AddressLike[];
    rewards: BigNumberish[];
  };

  export type AccountFeeRewardsStructOutput = [
    account: string,
    stakeTokens: string[],
    tokens: string[],
    rewards: bigint[]
  ] & {
    account: string;
    stakeTokens: string[];
    tokens: string[];
    rewards: bigint[];
  };

  export type AccountUsdFeeRewardStruct = {
    account: AddressLike;
    stakeToken: AddressLike;
    reward: BigNumberish;
  };

  export type AccountUsdFeeRewardStructOutput = [
    account: string,
    stakeToken: string,
    reward: bigint
  ] & { account: string; stakeToken: string; reward: bigint };
}

export interface IFeeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createClaimRewards"
      | "distributeFeeRewards"
      | "executeClaimRewards"
      | "getAccountFeeRewards"
      | "getAccountUsdFeeReward"
      | "getAccountsFeeRewards"
      | "getCumulativeRewardsPerStakeToken"
      | "getDaoTokenFee"
      | "getMarketTokenFee"
      | "getPoolTokenFee"
      | "getStakingTokenFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createClaimRewards",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFeeRewards",
    values: [BigNumberish, OracleProcess.OracleParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeClaimRewards",
    values: [BigNumberish, OracleProcess.OracleParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountFeeRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountUsdFeeReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountsFeeRewards",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCumulativeRewardsPerStakeToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDaoTokenFee",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketTokenFee",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolTokenFee",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingTokenFee",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createClaimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeFeeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeClaimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountFeeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountUsdFeeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountsFeeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCumulativeRewardsPerStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDaoTokenFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketTokenFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolTokenFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingTokenFee",
    data: BytesLike
  ): Result;
}

export interface IFee extends BaseContract {
  connect(runner?: ContractRunner | null): IFee;
  waitForDeployment(): Promise<this>;

  interface: IFeeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createClaimRewards: TypedContractMethod<
    [claimUsdToken: AddressLike, executionFee: BigNumberish],
    [void],
    "payable"
  >;

  distributeFeeRewards: TypedContractMethod<
    [interval: BigNumberish, oracles: OracleProcess.OracleParamStruct[]],
    [void],
    "nonpayable"
  >;

  executeClaimRewards: TypedContractMethod<
    [requestId: BigNumberish, oracles: OracleProcess.OracleParamStruct[]],
    [void],
    "nonpayable"
  >;

  getAccountFeeRewards: TypedContractMethod<
    [account: AddressLike],
    [IFee.AccountFeeRewardsStructOutput],
    "view"
  >;

  getAccountUsdFeeReward: TypedContractMethod<
    [account: AddressLike],
    [IFee.AccountUsdFeeRewardStructOutput],
    "view"
  >;

  getAccountsFeeRewards: TypedContractMethod<
    [accounts: AddressLike[]],
    [IFee.AccountFeeRewardsStructOutput[]],
    "view"
  >;

  getCumulativeRewardsPerStakeToken: TypedContractMethod<
    [stakeToken: AddressLike],
    [bigint],
    "view"
  >;

  getDaoTokenFee: TypedContractMethod<
    [stakeToken: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  getMarketTokenFee: TypedContractMethod<
    [symbol: BytesLike, token: AddressLike],
    [bigint],
    "view"
  >;

  getPoolTokenFee: TypedContractMethod<
    [stakeToken: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  getStakingTokenFee: TypedContractMethod<
    [stakeToken: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createClaimRewards"
  ): TypedContractMethod<
    [claimUsdToken: AddressLike, executionFee: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "distributeFeeRewards"
  ): TypedContractMethod<
    [interval: BigNumberish, oracles: OracleProcess.OracleParamStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeClaimRewards"
  ): TypedContractMethod<
    [requestId: BigNumberish, oracles: OracleProcess.OracleParamStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAccountFeeRewards"
  ): TypedContractMethod<
    [account: AddressLike],
    [IFee.AccountFeeRewardsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccountUsdFeeReward"
  ): TypedContractMethod<
    [account: AddressLike],
    [IFee.AccountUsdFeeRewardStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccountsFeeRewards"
  ): TypedContractMethod<
    [accounts: AddressLike[]],
    [IFee.AccountFeeRewardsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCumulativeRewardsPerStakeToken"
  ): TypedContractMethod<[stakeToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDaoTokenFee"
  ): TypedContractMethod<
    [stakeToken: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarketTokenFee"
  ): TypedContractMethod<
    [symbol: BytesLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolTokenFee"
  ): TypedContractMethod<
    [stakeToken: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakingTokenFee"
  ): TypedContractMethod<
    [stakeToken: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  filters: {};
}
