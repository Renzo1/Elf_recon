/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IStakingAccount {
  export type TokenBalanceStruct = {
    stakeAmount: BigNumberish;
    collateralTokens: AddressLike[];
    collateralAmounts: BigNumberish[];
    collateralStakeLiability: BigNumberish[];
  };

  export type TokenBalanceStructOutput = [
    stakeAmount: bigint,
    collateralTokens: string[],
    collateralAmounts: bigint[],
    collateralStakeLiability: bigint[]
  ] & {
    stakeAmount: bigint;
    collateralTokens: string[];
    collateralAmounts: bigint[];
    collateralStakeLiability: bigint[];
  };
}

export interface IStakingAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAccountPoolBalance"
      | "getAccountPoolCollateralAmount"
      | "getAccountUsdPoolAmount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccountPoolBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountPoolCollateralAmount",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountUsdPoolAmount",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountPoolCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountUsdPoolAmount",
    data: BytesLike
  ): Result;
}

export interface IStakingAccount extends BaseContract {
  connect(runner?: ContractRunner | null): IStakingAccount;
  waitForDeployment(): Promise<this>;

  interface: IStakingAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAccountPoolBalance: TypedContractMethod<
    [account: AddressLike, stakeToken: AddressLike],
    [IStakingAccount.TokenBalanceStructOutput],
    "view"
  >;

  getAccountPoolCollateralAmount: TypedContractMethod<
    [account: AddressLike, stakeToken: AddressLike, collateral: AddressLike],
    [bigint],
    "view"
  >;

  getAccountUsdPoolAmount: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAccountPoolBalance"
  ): TypedContractMethod<
    [account: AddressLike, stakeToken: AddressLike],
    [IStakingAccount.TokenBalanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccountPoolCollateralAmount"
  ): TypedContractMethod<
    [account: AddressLike, stakeToken: AddressLike, collateral: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccountUsdPoolAmount"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;

  filters: {};
}
