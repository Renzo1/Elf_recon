/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Referral {
  export type PropsStruct = {
    account: AddressLike;
    code: BytesLike;
    referralCode: BytesLike;
  };

  export type PropsStructOutput = [
    account: string,
    code: string,
    referralCode: string
  ] & { account: string; code: string; referralCode: string };
}

export interface IReferralInterface extends Interface {
  getFunction(
    nameOrSignature: "getAccountReferral" | "isCodeExists"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccountReferral",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCodeExists",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCodeExists",
    data: BytesLike
  ): Result;
}

export interface IReferral extends BaseContract {
  connect(runner?: ContractRunner | null): IReferral;
  waitForDeployment(): Promise<this>;

  interface: IReferralInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAccountReferral: TypedContractMethod<
    [account: AddressLike],
    [Referral.PropsStructOutput],
    "view"
  >;

  isCodeExists: TypedContractMethod<[code: BytesLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAccountReferral"
  ): TypedContractMethod<
    [account: AddressLike],
    [Referral.PropsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCodeExists"
  ): TypedContractMethod<[code: BytesLike], [boolean], "view">;

  filters: {};
}
