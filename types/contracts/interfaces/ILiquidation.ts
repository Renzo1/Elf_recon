/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace LiabilityClean {
  export type LiabilityCleanInfoStruct = {
    account: AddressLike;
    createTime: BigNumberish;
    liabilityTokens: AddressLike[];
    liabilities: BigNumberish[];
    collaterals: AddressLike[];
    collateralsAmount: BigNumberish[];
  };

  export type LiabilityCleanInfoStructOutput = [
    account: string,
    createTime: bigint,
    liabilityTokens: string[],
    liabilities: bigint[],
    collaterals: string[],
    collateralsAmount: bigint[]
  ] & {
    account: string;
    createTime: bigint;
    liabilityTokens: string[];
    liabilities: bigint[];
    collaterals: string[];
    collateralsAmount: bigint[];
  };
}

export declare namespace OracleProcess {
  export type OracleParamStruct = {
    token: AddressLike;
    targetToken: AddressLike;
    minPrice: BigNumberish;
    maxPrice: BigNumberish;
  };

  export type OracleParamStructOutput = [
    token: string,
    targetToken: string,
    minPrice: bigint,
    maxPrice: bigint
  ] & {
    token: string;
    targetToken: string;
    minPrice: bigint;
    maxPrice: bigint;
  };
}

export declare namespace ILiquidation {
  export type CleanLiabilityParamsStruct = {
    account: AddressLike;
    liabilityToken: AddressLike;
    liability: BigNumberish;
    payTokens: AddressLike[];
    payAmounts: BigNumberish[];
  };

  export type CleanLiabilityParamsStructOutput = [
    account: string,
    liabilityToken: string,
    liability: bigint,
    payTokens: string[],
    payAmounts: bigint[]
  ] & {
    account: string;
    liabilityToken: string;
    liability: bigint;
    payTokens: string[];
    payAmounts: bigint[];
  };
}

export interface ILiquidationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "callLiabilityClean"
      | "getAllCleanInfos"
      | "getInsuranceFunds"
      | "liquidationAccount"
      | "liquidationLiability"
      | "liquidationPosition"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "LiabilityCleanSuccessful"): EventFragment;

  encodeFunctionData(
    functionFragment: "callLiabilityClean",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCleanInfos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInsuranceFunds",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationAccount",
    values: [AddressLike, OracleProcess.OracleParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationLiability",
    values: [ILiquidation.CleanLiabilityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationPosition",
    values: [BytesLike, OracleProcess.OracleParamStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "callLiabilityClean",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCleanInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInsuranceFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationLiability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationPosition",
    data: BytesLike
  ): Result;
}

export namespace LiabilityCleanSuccessfulEvent {
  export type InputTuple = [cleanId: BigNumberish];
  export type OutputTuple = [cleanId: bigint];
  export interface OutputObject {
    cleanId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ILiquidation extends BaseContract {
  connect(runner?: ContractRunner | null): ILiquidation;
  waitForDeployment(): Promise<this>;

  interface: ILiquidationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  callLiabilityClean: TypedContractMethod<
    [cleanId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllCleanInfos: TypedContractMethod<
    [],
    [LiabilityClean.LiabilityCleanInfoStructOutput[]],
    "view"
  >;

  getInsuranceFunds: TypedContractMethod<
    [stakeToken: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  liquidationAccount: TypedContractMethod<
    [account: AddressLike, oracles: OracleProcess.OracleParamStruct[]],
    [void],
    "nonpayable"
  >;

  liquidationLiability: TypedContractMethod<
    [params: ILiquidation.CleanLiabilityParamsStruct],
    [void],
    "nonpayable"
  >;

  liquidationPosition: TypedContractMethod<
    [positionKey: BytesLike, oracles: OracleProcess.OracleParamStruct[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "callLiabilityClean"
  ): TypedContractMethod<[cleanId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllCleanInfos"
  ): TypedContractMethod<
    [],
    [LiabilityClean.LiabilityCleanInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInsuranceFunds"
  ): TypedContractMethod<
    [stakeToken: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidationAccount"
  ): TypedContractMethod<
    [account: AddressLike, oracles: OracleProcess.OracleParamStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidationLiability"
  ): TypedContractMethod<
    [params: ILiquidation.CleanLiabilityParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidationPosition"
  ): TypedContractMethod<
    [positionKey: BytesLike, oracles: OracleProcess.OracleParamStruct[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "LiabilityCleanSuccessful"
  ): TypedContractEvent<
    LiabilityCleanSuccessfulEvent.InputTuple,
    LiabilityCleanSuccessfulEvent.OutputTuple,
    LiabilityCleanSuccessfulEvent.OutputObject
  >;

  filters: {
    "LiabilityCleanSuccessful(uint256)": TypedContractEvent<
      LiabilityCleanSuccessfulEvent.InputTuple,
      LiabilityCleanSuccessfulEvent.OutputTuple,
      LiabilityCleanSuccessfulEvent.OutputObject
    >;
    LiabilityCleanSuccessful: TypedContractEvent<
      LiabilityCleanSuccessfulEvent.InputTuple,
      LiabilityCleanSuccessfulEvent.OutputTuple,
      LiabilityCleanSuccessfulEvent.OutputObject
    >;
  };
}
