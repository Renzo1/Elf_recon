/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "ArbSys",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbSys__factory>;
    getContractFactory(
      name: "AccountFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccountFacet__factory>;
    getContractFactory(
      name: "ConfigFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfigFacet__factory>;
    getContractFactory(
      name: "DiamondCutFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondCutFacet__factory>;
    getContractFactory(
      name: "DiamondLoupeFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondLoupeFacet__factory>;
    getContractFactory(
      name: "FaucetFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FaucetFacet__factory>;
    getContractFactory(
      name: "FeeFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeFacet__factory>;
    getContractFactory(
      name: "LiquidationFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidationFacet__factory>;
    getContractFactory(
      name: "MarketFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketFacet__factory>;
    getContractFactory(
      name: "MarketManagerFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketManagerFacet__factory>;
    getContractFactory(
      name: "OracleFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleFacet__factory>;
    getContractFactory(
      name: "OrderFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderFacet__factory>;
    getContractFactory(
      name: "PoolFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolFacet__factory>;
    getContractFactory(
      name: "PositionFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionFacet__factory>;
    getContractFactory(
      name: "RebalanceFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RebalanceFacet__factory>;
    getContractFactory(
      name: "ReferralFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReferralFacet__factory>;
    getContractFactory(
      name: "RoleAccessControlFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoleAccessControlFacet__factory>;
    getContractFactory(
      name: "StakeFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeFacet__factory>;
    getContractFactory(
      name: "StakingAccountFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingAccountFacet__factory>;
    getContractFactory(
      name: "SwapFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapFacet__factory>;
    getContractFactory(
      name: "VaultFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultFacet__factory>;
    getContractFactory(
      name: "IAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccount__factory>;
    getContractFactory(
      name: "IDiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamond__factory>;
    getContractFactory(
      name: "IDiamondCut",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamondCut__factory>;
    getContractFactory(
      name: "IDiamondLoupe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamondLoupe__factory>;
    getContractFactory(
      name: "IFaucet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFaucet__factory>;
    getContractFactory(
      name: "IFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFee__factory>;
    getContractFactory(
      name: "ILiquidation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidation__factory>;
    getContractFactory(
      name: "IMarket",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarket__factory>;
    getContractFactory(
      name: "IMarketManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarketManager__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "IOrder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOrder__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "IPosition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPosition__factory>;
    getContractFactory(
      name: "IRebalance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRebalance__factory>;
    getContractFactory(
      name: "IReferral",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReferral__factory>;
    getContractFactory(
      name: "IRoleAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRoleAccessControl__factory>;
    getContractFactory(
      name: "IStake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStake__factory>;
    getContractFactory(
      name: "IStakingAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingAccount__factory>;
    getContractFactory(
      name: "ISwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwap__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "MockToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockToken__factory>;
    getContractFactory(
      name: "Multicall3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall3__factory>;
    getContractFactory(
      name: "WETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH__factory>;
    getContractFactory(
      name: "AssetsProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssetsProcess__factory>;
    getContractFactory(
      name: "CancelOrderProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CancelOrderProcess__factory>;
    getContractFactory(
      name: "ClaimRewardsProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimRewardsProcess__factory>;
    getContractFactory(
      name: "ConfigProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfigProcess__factory>;
    getContractFactory(
      name: "DecreasePositionProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DecreasePositionProcess__factory>;
    getContractFactory(
      name: "FeeProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeProcess__factory>;
    getContractFactory(
      name: "FeeQueryProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeQueryProcess__factory>;
    getContractFactory(
      name: "GasProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasProcess__factory>;
    getContractFactory(
      name: "LiquidationProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidationProcess__factory>;
    getContractFactory(
      name: "LpPoolProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LpPoolProcess__factory>;
    getContractFactory(
      name: "LpPoolQueryProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LpPoolQueryProcess__factory>;
    getContractFactory(
      name: "MarketFactoryProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketFactoryProcess__factory>;
    getContractFactory(
      name: "MarketProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketProcess__factory>;
    getContractFactory(
      name: "MarketQueryProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketQueryProcess__factory>;
    getContractFactory(
      name: "MintProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintProcess__factory>;
    getContractFactory(
      name: "OracleProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleProcess__factory>;
    getContractFactory(
      name: "OrderProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderProcess__factory>;
    getContractFactory(
      name: "PositionMarginProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionMarginProcess__factory>;
    getContractFactory(
      name: "PositionQueryProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionQueryProcess__factory>;
    getContractFactory(
      name: "RedeemProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedeemProcess__factory>;
    getContractFactory(
      name: "VaultProcess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultProcess__factory>;
    getContractFactory(
      name: "Diamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Diamond__factory>;
    getContractFactory(
      name: "DiamondInit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondInit__factory>;
    getContractFactory(
      name: "Account",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Account__factory>;
    getContractFactory(
      name: "AppConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AppConfig__factory>;
    getContractFactory(
      name: "AppPoolConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AppPoolConfig__factory>;
    getContractFactory(
      name: "AppStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AppStorage__factory>;
    getContractFactory(
      name: "AppTradeConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AppTradeConfig__factory>;
    getContractFactory(
      name: "AppTradeTokenConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AppTradeTokenConfig__factory>;
    getContractFactory(
      name: "AppVaultConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AppVaultConfig__factory>;
    getContractFactory(
      name: "ClaimRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimRewards__factory>;
    getContractFactory(
      name: "CommonData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CommonData__factory>;
    getContractFactory(
      name: "FeeRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeRewards__factory>;
    getContractFactory(
      name: "InsuranceFund",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InsuranceFund__factory>;
    getContractFactory(
      name: "LiabilityClean",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiabilityClean__factory>;
    getContractFactory(
      name: "LibDiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibDiamond__factory>;
    getContractFactory(
      name: "LpPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LpPool__factory>;
    getContractFactory(
      name: "Market",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Market__factory>;
    getContractFactory(
      name: "Mint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mint__factory>;
    getContractFactory(
      name: "OracleFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleFeed__factory>;
    getContractFactory(
      name: "Order",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Order__factory>;
    getContractFactory(
      name: "PermissionFlag",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermissionFlag__factory>;
    getContractFactory(
      name: "Position",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Position__factory>;
    getContractFactory(
      name: "Redeem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Redeem__factory>;
    getContractFactory(
      name: "Referral",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Referral__factory>;
    getContractFactory(
      name: "RoleAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoleAccessControl__factory>;
    getContractFactory(
      name: "StakingAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingAccount__factory>;
    getContractFactory(
      name: "UpdateLeverage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpdateLeverage__factory>;
    getContractFactory(
      name: "UpdatePositionMargin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpdatePositionMargin__factory>;
    getContractFactory(
      name: "UsdPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UsdPool__factory>;
    getContractFactory(
      name: "UuidCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UuidCreator__factory>;
    getContractFactory(
      name: "Withdraw",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Withdraw__factory>;
    getContractFactory(
      name: "AddressUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressUtils__factory>;
    getContractFactory(
      name: "CalUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CalUtils__factory>;
    getContractFactory(
      name: "ChainUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainUtils__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "TokenUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenUtils__factory>;
    getContractFactory(
      name: "TransferUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransferUtils__factory>;
    getContractFactory(
      name: "TypeUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TypeUtils__factory>;
    getContractFactory(
      name: "LpVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LpVault__factory>;
    getContractFactory(
      name: "PortfolioVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PortfolioVault__factory>;
    getContractFactory(
      name: "StakeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeToken__factory>;
    getContractFactory(
      name: "TradeVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TradeVault__factory>;
    getContractFactory(
      name: "Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vault__factory>;

    getContractAt(
      name: "AggregatorV3Interface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IUniswapV3SwapCallback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    getContractAt(
      name: "ISwapRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "ArbSys",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbSys>;
    getContractAt(
      name: "AccountFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccountFacet>;
    getContractAt(
      name: "ConfigFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfigFacet>;
    getContractAt(
      name: "DiamondCutFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondCutFacet>;
    getContractAt(
      name: "DiamondLoupeFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondLoupeFacet>;
    getContractAt(
      name: "FaucetFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FaucetFacet>;
    getContractAt(
      name: "FeeFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeFacet>;
    getContractAt(
      name: "LiquidationFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidationFacet>;
    getContractAt(
      name: "MarketFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketFacet>;
    getContractAt(
      name: "MarketManagerFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketManagerFacet>;
    getContractAt(
      name: "OracleFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleFacet>;
    getContractAt(
      name: "OrderFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderFacet>;
    getContractAt(
      name: "PoolFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolFacet>;
    getContractAt(
      name: "PositionFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionFacet>;
    getContractAt(
      name: "RebalanceFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RebalanceFacet>;
    getContractAt(
      name: "ReferralFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReferralFacet>;
    getContractAt(
      name: "RoleAccessControlFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RoleAccessControlFacet>;
    getContractAt(
      name: "StakeFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeFacet>;
    getContractAt(
      name: "StakingAccountFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingAccountFacet>;
    getContractAt(
      name: "SwapFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapFacet>;
    getContractAt(
      name: "VaultFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultFacet>;
    getContractAt(
      name: "IAccount",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccount>;
    getContractAt(
      name: "IDiamond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamond>;
    getContractAt(
      name: "IDiamondCut",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamondCut>;
    getContractAt(
      name: "IDiamondLoupe",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamondLoupe>;
    getContractAt(
      name: "IFaucet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFaucet>;
    getContractAt(
      name: "IFee",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFee>;
    getContractAt(
      name: "ILiquidation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidation>;
    getContractAt(
      name: "IMarket",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarket>;
    getContractAt(
      name: "IMarketManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarketManager>;
    getContractAt(
      name: "IOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "IOrder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOrder>;
    getContractAt(
      name: "IPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "IPosition",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPosition>;
    getContractAt(
      name: "IRebalance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRebalance>;
    getContractAt(
      name: "IReferral",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IReferral>;
    getContractAt(
      name: "IRoleAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRoleAccessControl>;
    getContractAt(
      name: "IStake",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStake>;
    getContractAt(
      name: "IStakingAccount",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingAccount>;
    getContractAt(
      name: "ISwap",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwap>;
    getContractAt(
      name: "IVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "MockToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockToken>;
    getContractAt(
      name: "Multicall3",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall3>;
    getContractAt(
      name: "WETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH>;
    getContractAt(
      name: "AssetsProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AssetsProcess>;
    getContractAt(
      name: "CancelOrderProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CancelOrderProcess>;
    getContractAt(
      name: "ClaimRewardsProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimRewardsProcess>;
    getContractAt(
      name: "ConfigProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfigProcess>;
    getContractAt(
      name: "DecreasePositionProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DecreasePositionProcess>;
    getContractAt(
      name: "FeeProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeProcess>;
    getContractAt(
      name: "FeeQueryProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeQueryProcess>;
    getContractAt(
      name: "GasProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GasProcess>;
    getContractAt(
      name: "LiquidationProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidationProcess>;
    getContractAt(
      name: "LpPoolProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LpPoolProcess>;
    getContractAt(
      name: "LpPoolQueryProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LpPoolQueryProcess>;
    getContractAt(
      name: "MarketFactoryProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketFactoryProcess>;
    getContractAt(
      name: "MarketProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketProcess>;
    getContractAt(
      name: "MarketQueryProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketQueryProcess>;
    getContractAt(
      name: "MintProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MintProcess>;
    getContractAt(
      name: "OracleProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleProcess>;
    getContractAt(
      name: "OrderProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderProcess>;
    getContractAt(
      name: "PositionMarginProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionMarginProcess>;
    getContractAt(
      name: "PositionQueryProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionQueryProcess>;
    getContractAt(
      name: "RedeemProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RedeemProcess>;
    getContractAt(
      name: "VaultProcess",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultProcess>;
    getContractAt(
      name: "Diamond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Diamond>;
    getContractAt(
      name: "DiamondInit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondInit>;
    getContractAt(
      name: "Account",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Account>;
    getContractAt(
      name: "AppConfig",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AppConfig>;
    getContractAt(
      name: "AppPoolConfig",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AppPoolConfig>;
    getContractAt(
      name: "AppStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AppStorage>;
    getContractAt(
      name: "AppTradeConfig",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AppTradeConfig>;
    getContractAt(
      name: "AppTradeTokenConfig",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AppTradeTokenConfig>;
    getContractAt(
      name: "AppVaultConfig",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AppVaultConfig>;
    getContractAt(
      name: "ClaimRewards",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimRewards>;
    getContractAt(
      name: "CommonData",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CommonData>;
    getContractAt(
      name: "FeeRewards",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeRewards>;
    getContractAt(
      name: "InsuranceFund",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InsuranceFund>;
    getContractAt(
      name: "LiabilityClean",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LiabilityClean>;
    getContractAt(
      name: "LibDiamond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LibDiamond>;
    getContractAt(
      name: "LpPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LpPool>;
    getContractAt(
      name: "Market",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Market>;
    getContractAt(
      name: "Mint",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Mint>;
    getContractAt(
      name: "OracleFeed",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleFeed>;
    getContractAt(
      name: "Order",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Order>;
    getContractAt(
      name: "PermissionFlag",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PermissionFlag>;
    getContractAt(
      name: "Position",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Position>;
    getContractAt(
      name: "Redeem",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Redeem>;
    getContractAt(
      name: "Referral",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Referral>;
    getContractAt(
      name: "RoleAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RoleAccessControl>;
    getContractAt(
      name: "StakingAccount",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingAccount>;
    getContractAt(
      name: "UpdateLeverage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UpdateLeverage>;
    getContractAt(
      name: "UpdatePositionMargin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UpdatePositionMargin>;
    getContractAt(
      name: "UsdPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UsdPool>;
    getContractAt(
      name: "UuidCreator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UuidCreator>;
    getContractAt(
      name: "Withdraw",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Withdraw>;
    getContractAt(
      name: "AddressUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressUtils>;
    getContractAt(
      name: "CalUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CalUtils>;
    getContractAt(
      name: "ChainUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainUtils>;
    getContractAt(
      name: "Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "TokenUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenUtils>;
    getContractAt(
      name: "TransferUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TransferUtils>;
    getContractAt(
      name: "TypeUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TypeUtils>;
    getContractAt(
      name: "LpVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LpVault>;
    getContractAt(
      name: "PortfolioVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PortfolioVault>;
    getContractAt(
      name: "StakeToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeToken>;
    getContractAt(
      name: "TradeVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TradeVault>;
    getContractAt(
      name: "Vault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Vault>;

    deployContract(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorV3Interface>;
    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    deployContract(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISwapRouter>;
    deployContract(
      name: "ArbSys",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ArbSys>;
    deployContract(
      name: "AccountFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccountFacet>;
    deployContract(
      name: "ConfigFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConfigFacet>;
    deployContract(
      name: "DiamondCutFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondCutFacet>;
    deployContract(
      name: "DiamondLoupeFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondLoupeFacet>;
    deployContract(
      name: "FaucetFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FaucetFacet>;
    deployContract(
      name: "FeeFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeFacet>;
    deployContract(
      name: "LiquidationFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LiquidationFacet>;
    deployContract(
      name: "MarketFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketFacet>;
    deployContract(
      name: "MarketManagerFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketManagerFacet>;
    deployContract(
      name: "OracleFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleFacet>;
    deployContract(
      name: "OrderFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderFacet>;
    deployContract(
      name: "PoolFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolFacet>;
    deployContract(
      name: "PositionFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PositionFacet>;
    deployContract(
      name: "RebalanceFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RebalanceFacet>;
    deployContract(
      name: "ReferralFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReferralFacet>;
    deployContract(
      name: "RoleAccessControlFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RoleAccessControlFacet>;
    deployContract(
      name: "StakeFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakeFacet>;
    deployContract(
      name: "StakingAccountFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakingAccountFacet>;
    deployContract(
      name: "SwapFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SwapFacet>;
    deployContract(
      name: "VaultFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaultFacet>;
    deployContract(
      name: "IAccount",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccount>;
    deployContract(
      name: "IDiamond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamond>;
    deployContract(
      name: "IDiamondCut",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondCut>;
    deployContract(
      name: "IDiamondLoupe",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondLoupe>;
    deployContract(
      name: "IFaucet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFaucet>;
    deployContract(
      name: "IFee",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFee>;
    deployContract(
      name: "ILiquidation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILiquidation>;
    deployContract(
      name: "IMarket",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarket>;
    deployContract(
      name: "IMarketManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarketManager>;
    deployContract(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracle>;
    deployContract(
      name: "IOrder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOrder>;
    deployContract(
      name: "IPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPool>;
    deployContract(
      name: "IPosition",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPosition>;
    deployContract(
      name: "IRebalance",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRebalance>;
    deployContract(
      name: "IReferral",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReferral>;
    deployContract(
      name: "IRoleAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRoleAccessControl>;
    deployContract(
      name: "IStake",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStake>;
    deployContract(
      name: "IStakingAccount",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakingAccount>;
    deployContract(
      name: "ISwap",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISwap>;
    deployContract(
      name: "IVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVault>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "MockToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockToken>;
    deployContract(
      name: "Multicall3",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Multicall3>;
    deployContract(
      name: "WETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WETH>;
    deployContract(
      name: "AssetsProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AssetsProcess>;
    deployContract(
      name: "CancelOrderProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CancelOrderProcess>;
    deployContract(
      name: "ClaimRewardsProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClaimRewardsProcess>;
    deployContract(
      name: "ConfigProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConfigProcess>;
    deployContract(
      name: "DecreasePositionProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DecreasePositionProcess>;
    deployContract(
      name: "FeeProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeProcess>;
    deployContract(
      name: "FeeQueryProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeQueryProcess>;
    deployContract(
      name: "GasProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasProcess>;
    deployContract(
      name: "LiquidationProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LiquidationProcess>;
    deployContract(
      name: "LpPoolProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LpPoolProcess>;
    deployContract(
      name: "LpPoolQueryProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LpPoolQueryProcess>;
    deployContract(
      name: "MarketFactoryProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketFactoryProcess>;
    deployContract(
      name: "MarketProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketProcess>;
    deployContract(
      name: "MarketQueryProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketQueryProcess>;
    deployContract(
      name: "MintProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintProcess>;
    deployContract(
      name: "OracleProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleProcess>;
    deployContract(
      name: "OrderProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderProcess>;
    deployContract(
      name: "PositionMarginProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PositionMarginProcess>;
    deployContract(
      name: "PositionQueryProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PositionQueryProcess>;
    deployContract(
      name: "RedeemProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RedeemProcess>;
    deployContract(
      name: "VaultProcess",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaultProcess>;
    deployContract(
      name: "Diamond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Diamond>;
    deployContract(
      name: "DiamondInit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondInit>;
    deployContract(
      name: "Account",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Account>;
    deployContract(
      name: "AppConfig",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppConfig>;
    deployContract(
      name: "AppPoolConfig",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppPoolConfig>;
    deployContract(
      name: "AppStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppStorage>;
    deployContract(
      name: "AppTradeConfig",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppTradeConfig>;
    deployContract(
      name: "AppTradeTokenConfig",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppTradeTokenConfig>;
    deployContract(
      name: "AppVaultConfig",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppVaultConfig>;
    deployContract(
      name: "ClaimRewards",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClaimRewards>;
    deployContract(
      name: "CommonData",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CommonData>;
    deployContract(
      name: "FeeRewards",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeRewards>;
    deployContract(
      name: "InsuranceFund",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InsuranceFund>;
    deployContract(
      name: "LiabilityClean",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LiabilityClean>;
    deployContract(
      name: "LibDiamond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibDiamond>;
    deployContract(
      name: "LpPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LpPool>;
    deployContract(
      name: "Market",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Market>;
    deployContract(
      name: "Mint",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Mint>;
    deployContract(
      name: "OracleFeed",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleFeed>;
    deployContract(
      name: "Order",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Order>;
    deployContract(
      name: "PermissionFlag",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PermissionFlag>;
    deployContract(
      name: "Position",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Position>;
    deployContract(
      name: "Redeem",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Redeem>;
    deployContract(
      name: "Referral",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Referral>;
    deployContract(
      name: "RoleAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RoleAccessControl>;
    deployContract(
      name: "StakingAccount",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakingAccount>;
    deployContract(
      name: "UpdateLeverage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpdateLeverage>;
    deployContract(
      name: "UpdatePositionMargin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpdatePositionMargin>;
    deployContract(
      name: "UsdPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UsdPool>;
    deployContract(
      name: "UuidCreator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UuidCreator>;
    deployContract(
      name: "Withdraw",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Withdraw>;
    deployContract(
      name: "AddressUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddressUtils>;
    deployContract(
      name: "CalUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CalUtils>;
    deployContract(
      name: "ChainUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainUtils>;
    deployContract(
      name: "Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "TokenUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenUtils>;
    deployContract(
      name: "TransferUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransferUtils>;
    deployContract(
      name: "TypeUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TypeUtils>;
    deployContract(
      name: "LpVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LpVault>;
    deployContract(
      name: "PortfolioVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PortfolioVault>;
    deployContract(
      name: "StakeToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakeToken>;
    deployContract(
      name: "TradeVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TradeVault>;
    deployContract(
      name: "Vault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Vault>;

    deployContract(
      name: "AggregatorV3Interface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorV3Interface>;
    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IUniswapV3SwapCallback",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    deployContract(
      name: "ISwapRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISwapRouter>;
    deployContract(
      name: "ArbSys",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ArbSys>;
    deployContract(
      name: "AccountFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccountFacet>;
    deployContract(
      name: "ConfigFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConfigFacet>;
    deployContract(
      name: "DiamondCutFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondCutFacet>;
    deployContract(
      name: "DiamondLoupeFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondLoupeFacet>;
    deployContract(
      name: "FaucetFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FaucetFacet>;
    deployContract(
      name: "FeeFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeFacet>;
    deployContract(
      name: "LiquidationFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LiquidationFacet>;
    deployContract(
      name: "MarketFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketFacet>;
    deployContract(
      name: "MarketManagerFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketManagerFacet>;
    deployContract(
      name: "OracleFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleFacet>;
    deployContract(
      name: "OrderFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderFacet>;
    deployContract(
      name: "PoolFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PoolFacet>;
    deployContract(
      name: "PositionFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PositionFacet>;
    deployContract(
      name: "RebalanceFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RebalanceFacet>;
    deployContract(
      name: "ReferralFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReferralFacet>;
    deployContract(
      name: "RoleAccessControlFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RoleAccessControlFacet>;
    deployContract(
      name: "StakeFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakeFacet>;
    deployContract(
      name: "StakingAccountFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakingAccountFacet>;
    deployContract(
      name: "SwapFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SwapFacet>;
    deployContract(
      name: "VaultFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaultFacet>;
    deployContract(
      name: "IAccount",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccount>;
    deployContract(
      name: "IDiamond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamond>;
    deployContract(
      name: "IDiamondCut",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondCut>;
    deployContract(
      name: "IDiamondLoupe",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondLoupe>;
    deployContract(
      name: "IFaucet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFaucet>;
    deployContract(
      name: "IFee",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFee>;
    deployContract(
      name: "ILiquidation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILiquidation>;
    deployContract(
      name: "IMarket",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarket>;
    deployContract(
      name: "IMarketManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarketManager>;
    deployContract(
      name: "IOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOracle>;
    deployContract(
      name: "IOrder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOrder>;
    deployContract(
      name: "IPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPool>;
    deployContract(
      name: "IPosition",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPosition>;
    deployContract(
      name: "IRebalance",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRebalance>;
    deployContract(
      name: "IReferral",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReferral>;
    deployContract(
      name: "IRoleAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRoleAccessControl>;
    deployContract(
      name: "IStake",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStake>;
    deployContract(
      name: "IStakingAccount",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStakingAccount>;
    deployContract(
      name: "ISwap",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISwap>;
    deployContract(
      name: "IVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVault>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "MockToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockToken>;
    deployContract(
      name: "Multicall3",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Multicall3>;
    deployContract(
      name: "WETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WETH>;
    deployContract(
      name: "AssetsProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AssetsProcess>;
    deployContract(
      name: "CancelOrderProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CancelOrderProcess>;
    deployContract(
      name: "ClaimRewardsProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClaimRewardsProcess>;
    deployContract(
      name: "ConfigProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConfigProcess>;
    deployContract(
      name: "DecreasePositionProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DecreasePositionProcess>;
    deployContract(
      name: "FeeProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeProcess>;
    deployContract(
      name: "FeeQueryProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeQueryProcess>;
    deployContract(
      name: "GasProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasProcess>;
    deployContract(
      name: "LiquidationProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LiquidationProcess>;
    deployContract(
      name: "LpPoolProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LpPoolProcess>;
    deployContract(
      name: "LpPoolQueryProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LpPoolQueryProcess>;
    deployContract(
      name: "MarketFactoryProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketFactoryProcess>;
    deployContract(
      name: "MarketProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketProcess>;
    deployContract(
      name: "MarketQueryProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketQueryProcess>;
    deployContract(
      name: "MintProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MintProcess>;
    deployContract(
      name: "OracleProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleProcess>;
    deployContract(
      name: "OrderProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderProcess>;
    deployContract(
      name: "PositionMarginProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PositionMarginProcess>;
    deployContract(
      name: "PositionQueryProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PositionQueryProcess>;
    deployContract(
      name: "RedeemProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RedeemProcess>;
    deployContract(
      name: "VaultProcess",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VaultProcess>;
    deployContract(
      name: "Diamond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Diamond>;
    deployContract(
      name: "DiamondInit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondInit>;
    deployContract(
      name: "Account",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Account>;
    deployContract(
      name: "AppConfig",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppConfig>;
    deployContract(
      name: "AppPoolConfig",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppPoolConfig>;
    deployContract(
      name: "AppStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppStorage>;
    deployContract(
      name: "AppTradeConfig",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppTradeConfig>;
    deployContract(
      name: "AppTradeTokenConfig",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppTradeTokenConfig>;
    deployContract(
      name: "AppVaultConfig",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppVaultConfig>;
    deployContract(
      name: "ClaimRewards",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClaimRewards>;
    deployContract(
      name: "CommonData",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CommonData>;
    deployContract(
      name: "FeeRewards",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeRewards>;
    deployContract(
      name: "InsuranceFund",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InsuranceFund>;
    deployContract(
      name: "LiabilityClean",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LiabilityClean>;
    deployContract(
      name: "LibDiamond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibDiamond>;
    deployContract(
      name: "LpPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LpPool>;
    deployContract(
      name: "Market",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Market>;
    deployContract(
      name: "Mint",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Mint>;
    deployContract(
      name: "OracleFeed",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OracleFeed>;
    deployContract(
      name: "Order",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Order>;
    deployContract(
      name: "PermissionFlag",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PermissionFlag>;
    deployContract(
      name: "Position",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Position>;
    deployContract(
      name: "Redeem",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Redeem>;
    deployContract(
      name: "Referral",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Referral>;
    deployContract(
      name: "RoleAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RoleAccessControl>;
    deployContract(
      name: "StakingAccount",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakingAccount>;
    deployContract(
      name: "UpdateLeverage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpdateLeverage>;
    deployContract(
      name: "UpdatePositionMargin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpdatePositionMargin>;
    deployContract(
      name: "UsdPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UsdPool>;
    deployContract(
      name: "UuidCreator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UuidCreator>;
    deployContract(
      name: "Withdraw",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Withdraw>;
    deployContract(
      name: "AddressUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddressUtils>;
    deployContract(
      name: "CalUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CalUtils>;
    deployContract(
      name: "ChainUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainUtils>;
    deployContract(
      name: "Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "TokenUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenUtils>;
    deployContract(
      name: "TransferUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransferUtils>;
    deployContract(
      name: "TypeUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TypeUtils>;
    deployContract(
      name: "LpVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LpVault>;
    deployContract(
      name: "PortfolioVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PortfolioVault>;
    deployContract(
      name: "StakeToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StakeToken>;
    deployContract(
      name: "TradeVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TradeVault>;
    deployContract(
      name: "Vault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Vault>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
