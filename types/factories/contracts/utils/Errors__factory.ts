/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { Errors, ErrorsInterface } from "../../../contracts/utils/Errors";

const _abi = [
  {
    inputs: [],
    name: "AccountNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "AddMarginTooBig",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount2",
        type: "uint256",
      },
    ],
    name: "AmountNotMatch",
    type: "error",
  },
  {
    inputs: [],
    name: "AmountZeroNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "BalanceNotEnough",
    type: "error",
  },
  {
    inputs: [],
    name: "BlockNumberInvalid",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "CallLiabilityCleanNotExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "CancelOrderWithLiquidation",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ChangeCrossModeError",
    type: "error",
  },
  {
    inputs: [],
    name: "ClaimRewardsRequestNotExists",
    type: "error",
  },
  {
    inputs: [],
    name: "ClaimTokenNotSupported",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "cap",
        type: "uint256",
      },
    ],
    name: "CollateralTotalCapOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "cap",
        type: "uint256",
      },
    ],
    name: "CollateralUserCapOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakeToken",
        type: "address",
      },
    ],
    name: "CreateStakePoolExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "code",
        type: "bytes32",
      },
    ],
    name: "CreateSymbolExists",
    type: "error",
  },
  {
    inputs: [],
    name: "DecreaseOrderSideInvalid",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "marginToken",
        type: "address",
      },
    ],
    name: "DecreasePositionNotExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "DecreaseQtyTooBig",
    type: "error",
  },
  {
    inputs: [],
    name: "ExecutionFeeLessThanConfigGasFeeLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "ExecutionFeeNotEnough",
    type: "error",
  },
  {
    inputs: [],
    name: "ExecutionPriceInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "IgnoreSwapWithAccountLiabilityZero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "leverage",
        type: "uint256",
      },
    ],
    name: "LeverageInvalid",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "positionKey",
        type: "bytes32",
      },
      {
        internalType: "int256",
        name: "bankruptcyMR",
        type: "int256",
      },
    ],
    name: "LiquidationErrorWithBankruptcyPriceZero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "LiquidationIgnored",
    type: "error",
  },
  {
    inputs: [],
    name: "MarginModeError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "isLong",
        type: "bool",
      },
    ],
    name: "MaxOILimited",
    type: "error",
  },
  {
    inputs: [],
    name: "MintCollateralFailedWithPriceCloseToDiscount",
    type: "error",
  },
  {
    inputs: [],
    name: "MintCollateralNotSupport",
    type: "error",
  },
  {
    inputs: [],
    name: "MintCollateralOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "baseToken",
        type: "address",
      },
    ],
    name: "MintFailedWithBalanceNotEnough",
    type: "error",
  },
  {
    inputs: [],
    name: "MintRequestNotExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minStakeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "realStakeAmount",
        type: "uint256",
      },
    ],
    name: "MintStakeTokenTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakeToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "mintToken",
        type: "address",
      },
    ],
    name: "MintTokenInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "MintWithAmountZero",
    type: "error",
  },
  {
    inputs: [],
    name: "MintWithParamError",
    type: "error",
  },
  {
    inputs: [],
    name: "NoNeedToPayLiability",
    type: "error",
  },
  {
    inputs: [],
    name: "OIRatioLimited",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyCollateralSupported",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyCrossSupported",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyDecreaseOrderSupported",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyIsolateSupported",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
    ],
    name: "OnlyOneShortPositionSupport",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderMarginTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "orderId",
        type: "uint256",
      },
    ],
    name: "OrderNotExists",
    type: "error",
  },
  {
    inputs: [],
    name: "PlaceOrderWithParamsError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakeToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "PoolAmountNotEnough",
    type: "error",
  },
  {
    inputs: [],
    name: "PoolNotExists",
    type: "error",
  },
  {
    inputs: [],
    name: "PoolUnsettledAmountInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "PoolValueIsZero",
    type: "error",
  },
  {
    inputs: [],
    name: "PoolValueLessThanZero",
    type: "error",
  },
  {
    inputs: [],
    name: "PositionNotExists",
    type: "error",
  },
  {
    inputs: [],
    name: "PositionShouldBeLiquidation",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "PositionTooBig",
    type: "error",
  },
  {
    inputs: [],
    name: "PriceIsZero",
    type: "error",
  },
  {
    inputs: [],
    name: "RedeemCollateralNotSupport",
    type: "error",
  },
  {
    inputs: [],
    name: "RedeemReduceStakeTokenTooSmall",
    type: "error",
  },
  {
    inputs: [],
    name: "RedeemRequestNotExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "redeemAmount",
        type: "uint256",
      },
    ],
    name: "RedeemStakeTokenTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakeToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "mintToken",
        type: "address",
      },
    ],
    name: "RedeemTokenInvalid",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "stakeToken",
        type: "address",
      },
    ],
    name: "RedeemWithAmountEmpty",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "stakeToken",
        type: "address",
      },
    ],
    name: "RedeemWithAmountNotEnough",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vaultAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "RedeemWithVaultBalanceNotEnough",
    type: "error",
  },
  {
    inputs: [],
    name: "ReduceMarginTooBig",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ReducePositionTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakeToken",
        type: "address",
      },
    ],
    name: "StakeTokenInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "SymbolNotExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
    ],
    name: "SymbolStatusInvalid",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "TokenInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenIsNotSupport",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenIsNotSupportCollateral",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TransferErrorWithVaultBalanceNotEnough",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "msg",
        type: "bytes",
      },
    ],
    name: "UnknownError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "isLong",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "existsLeverage",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newLeverage",
        type: "uint256",
      },
    ],
    name: "UpdateLeverageError",
    type: "error",
  },
  {
    inputs: [],
    name: "UpdateLeverageRequestNotExists",
    type: "error",
  },
  {
    inputs: [],
    name: "UpdateLeverageWithNoChange",
    type: "error",
  },
  {
    inputs: [],
    name: "UpdatePositionMarginRequestNotExists",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawNotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawRequestNotExists",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawWithNoEnoughAmount",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d48a019718eb5c3b14569285f436f351aabf220982a6efbe1ee767305444756564736f6c63430008120033";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Errors & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Errors__factory {
    return super.connect(runner) as Errors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Errors {
    return new Contract(address, _abi, runner) as unknown as Errors;
  }
}
