/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  VaultProcess,
  VaultProcessInterface,
} from "../../../contracts/process/VaultProcess";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TransferErrorWithVaultBalanceNotEnough",
    type: "error",
  },
] as const;

const _bytecode =
  "0x61073d61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c806344be72ee1461005b5780637c4368c11461009057806385e2b880146100b25780638eb10843146100d2575b600080fd5b81801561006757600080fd5b5061007b6100763660046105e3565b610100565b60405190151581526020015b60405180910390f35b81801561009c57600080fd5b506100b06100ab36600461064a565b6102c3565b005b8180156100be57600080fd5b5061007b6100cd366004610674565b6103ac565b8180156100de57600080fd5b506100f26100ed366004610674565b6103c7565b604051908152602001610087565b600082600003610112575060006102ba565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152600091908716906370a0823190602401602060405180830381865afa158015610182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a691906106bf565b9050838110610249576040517f078d3b7900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015286811660248301526044820186905288169063078d3b7990606401600060405180830381600087803b15801561022757600080fd5b505af115801561023b573d6000803e3d6000fd5b5050505060019150506102ba565b826102b4576040517fb5813dae00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8089166004830152808816602483015286166044820152606481018590526084015b60405180910390fd5b60009150505b95945050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040516102fa91906106d8565b60006040518083038185875af1925050503d8060008114610337576040519150601f19603f3d011682016040523d82523d6000602084013e61033c565b606091505b50509050806103a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f535445000000000000000000000000000000000000000000000000000000000060448201526064016102ab565b505050565b60006103bc858585856000610100565b90505b949350505050565b6000816000036103d9575060006103bf565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152600091908616906370a0823190602401602060405180830381865afa158015610449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046d91906106bf565b9050806000036104815760009150506103bf565b828110610521576040517f078d3b7900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015285811660248301526044820185905287169063078d3b7990606401600060405180830381600087803b15801561050057600080fd5b505af1158015610514573d6000803e3d6000fd5b50505050829150506103bf565b6040517f078d3b7900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015285811660248301526044820183905287169063078d3b7990606401600060405180830381600087803b15801561059957600080fd5b505af11580156105ad573d6000803e3d6000fd5b50505050809150506103bf565b803573ffffffffffffffffffffffffffffffffffffffff811681146105de57600080fd5b919050565b600080600080600060a086880312156105fb57600080fd5b610604866105ba565b9450610612602087016105ba565b9350610620604087016105ba565b9250606086013591506080860135801515811461063c57600080fd5b809150509295509295909350565b6000806040838503121561065d57600080fd5b610666836105ba565b946020939093013593505050565b6000806000806080858703121561068a57600080fd5b610693856105ba565b93506106a1602086016105ba565b92506106af604086016105ba565b9396929550929360600135925050565b6000602082840312156106d157600080fd5b5051919050565b6000825160005b818110156106f957602081860181015185830152016106df565b50600092019182525091905056fea2646970667358221220571fe31fdf00783fbbe4da11954a33e28e8f028e330608858517fdb9159476fc64736f6c63430008120033";

type VaultProcessConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultProcessConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VaultProcess__factory extends ContractFactory {
  constructor(...args: VaultProcessConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      VaultProcess & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): VaultProcess__factory {
    return super.connect(runner) as VaultProcess__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultProcessInterface {
    return new Interface(_abi) as VaultProcessInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): VaultProcess {
    return new Contract(address, _abi, runner) as unknown as VaultProcess;
  }
}
