/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ISwap,
  ISwapInterface,
} from "../../../contracts/interfaces/ISwap";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "address[][]",
        name: "accountTokens",
        type: "address[][]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "address",
            name: "targetToken",
            type: "address",
          },
          {
            internalType: "int256",
            name: "minPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "maxPrice",
            type: "int256",
          },
        ],
        internalType: "struct OracleProcess.OracleParam[]",
        name: "oracles",
        type: "tuple[]",
      },
    ],
    name: "swapPortfolioToPayLiability",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ISwap__factory {
  static readonly abi = _abi;
  static createInterface(): ISwapInterface {
    return new Interface(_abi) as ISwapInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ISwap {
    return new Contract(address, _abi, runner) as unknown as ISwap;
  }
}
