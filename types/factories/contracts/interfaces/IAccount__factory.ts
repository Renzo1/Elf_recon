/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IAccount,
  IAccountInterface,
} from "../../../contracts/interfaces/IAccount";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "int256[]",
            name: "changedTokenAmounts",
            type: "int256[]",
          },
        ],
        internalType: "struct AssetsProcess.UpdateAccountTokenParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "batchUpdateAccountToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "reasonCode",
        type: "bytes32",
      },
    ],
    name: "cancelWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "createWithdrawRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "address",
            name: "targetToken",
            type: "address",
          },
          {
            internalType: "int256",
            name: "minPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "maxPrice",
            type: "int256",
          },
        ],
        internalType: "struct OracleProcess.OracleParam[]",
        name: "oracles",
        type: "tuple[]",
      },
    ],
    name: "executeWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getAccountInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "interest",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "liability",
                type: "uint256",
              },
            ],
            internalType: "struct Account.TokenBalance[]",
            name: "tokenBalances",
            type: "tuple[]",
          },
          {
            internalType: "address[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "bytes32[]",
            name: "positions",
            type: "bytes32[]",
          },
          {
            internalType: "uint256",
            name: "portfolioNetValue",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalUsedValue",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "availableValue",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "orderHoldInUsd",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "crossMMR",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "crossNetValue",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "totalMM",
            type: "uint256",
          },
        ],
        internalType: "struct IAccount.AccountInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "address",
            name: "targetToken",
            type: "address",
          },
          {
            internalType: "int256",
            name: "minPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "maxPrice",
            type: "int256",
          },
        ],
        internalType: "struct OracleProcess.OracleParam[]",
        name: "oracles",
        type: "tuple[]",
      },
    ],
    name: "getAccountInfoWithOracles",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "interest",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "liability",
                type: "uint256",
              },
            ],
            internalType: "struct Account.TokenBalance[]",
            name: "tokenBalances",
            type: "tuple[]",
          },
          {
            internalType: "address[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "bytes32[]",
            name: "positions",
            type: "bytes32[]",
          },
          {
            internalType: "uint256",
            name: "portfolioNetValue",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalUsedValue",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "availableValue",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "orderHoldInUsd",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "crossMMR",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "crossNetValue",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "totalMM",
            type: "uint256",
          },
        ],
        internalType: "struct IAccount.AccountInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IAccount__factory {
  static readonly abi = _abi;
  static createInterface(): IAccountInterface {
    return new Interface(_abi) as IAccountInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IAccount {
    return new Contract(address, _abi, runner) as unknown as IAccount;
  }
}
