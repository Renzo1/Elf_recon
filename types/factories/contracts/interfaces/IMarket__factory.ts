/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IMarket,
  IMarketInterface,
} from "../../../contracts/interfaces/IMarket";

const _abi = [
  {
    inputs: [],
    name: "getAllSymbols",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "code",
            type: "bytes32",
          },
          {
            internalType: "enum Symbol.Status",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "stakeToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "baseToken",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "maxLeverage",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "tickSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "openFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "closeFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxLongOpenInterestCap",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxShortOpenInterestCap",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "longShortRatioLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "longShortOiBottomLimit",
                type: "uint256",
              },
            ],
            internalType: "struct AppConfig.SymbolConfig",
            name: "config",
            type: "tuple",
          },
        ],
        internalType: "struct IMarket.SymbolInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "getLastUuid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "code",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "address",
            name: "targetToken",
            type: "address",
          },
          {
            internalType: "int256",
            name: "minPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "maxPrice",
            type: "int256",
          },
        ],
        internalType: "struct OracleProcess.OracleParam[]",
        name: "oracles",
        type: "tuple[]",
      },
    ],
    name: "getMarketInfo",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bytes32",
                name: "code",
                type: "bytes32",
              },
              {
                internalType: "enum Symbol.Status",
                name: "status",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "stakeToken",
                type: "address",
              },
              {
                internalType: "address",
                name: "indexToken",
                type: "address",
              },
              {
                internalType: "address",
                name: "baseToken",
                type: "address",
              },
              {
                internalType: "string",
                name: "baseTokenName",
                type: "string",
              },
            ],
            internalType: "struct Symbol.Props",
            name: "symbolInfo",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "longPositionInterest",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "longPositionEntryPrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalShortPositionInterest",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "openInterest",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "entryPrice",
                type: "uint256",
              },
            ],
            internalType: "struct Market.MarketPosition[]",
            name: "shortPositions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "availableLiquidity",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "int256",
                name: "longFundingFeePerQty",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "shortFundingFeePerQty",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "totalLongFundingFee",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "totalShortFundingFee",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "longFundingFeeRate",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "shortFundingFeeRate",
                type: "int256",
              },
              {
                internalType: "uint256",
                name: "lastUpdateTime",
                type: "uint256",
              },
            ],
            internalType: "struct Market.FundingFee",
            name: "fundingFee",
            type: "tuple",
          },
        ],
        internalType: "struct IMarket.MarketInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStakeUsdToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "code",
        type: "bytes32",
      },
    ],
    name: "getSymbol",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "code",
            type: "bytes32",
          },
          {
            internalType: "enum Symbol.Status",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "stakeToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "baseToken",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "maxLeverage",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "tickSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "openFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "closeFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxLongOpenInterestCap",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxShortOpenInterestCap",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "longShortRatioLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "longShortOiBottomLimit",
                type: "uint256",
              },
            ],
            internalType: "struct AppConfig.SymbolConfig",
            name: "config",
            type: "tuple",
          },
        ],
        internalType: "struct IMarket.SymbolInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getTradeTokenInfo",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tradeTokenCollateral",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tradeTokenLiability",
            type: "uint256",
          },
        ],
        internalType: "struct IMarket.TradeTokenInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IMarket__factory {
  static readonly abi = _abi;
  static createInterface(): IMarketInterface {
    return new Interface(_abi) as IMarketInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IMarket {
    return new Contract(address, _abi, runner) as unknown as IMarket;
  }
}
