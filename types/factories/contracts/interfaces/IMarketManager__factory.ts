/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IMarketManager,
  IMarketManagerInterface,
} from "../../../contracts/interfaces/IMarketManager";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "code",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "stakeTokenName",
            type: "string",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "baseToken",
            type: "address",
          },
        ],
        internalType: "struct MarketFactoryProcess.CreateMarketParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "createMarket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "stakeTokenName",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
    ],
    name: "createStakeUsdPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IMarketManager__factory {
  static readonly abi = _abi;
  static createInterface(): IMarketManagerInterface {
    return new Interface(_abi) as IMarketManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IMarketManager {
    return new Contract(address, _abi, runner) as unknown as IMarketManager;
  }
}
