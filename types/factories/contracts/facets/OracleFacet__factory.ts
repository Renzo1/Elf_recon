/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  OracleFacet,
  OracleFacetInterface,
} from "../../../contracts/facets/OracleFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bool",
        name: "min",
        type: "bool",
      },
    ],
    name: "getLatestUsdPrice",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "address",
            name: "targetToken",
            type: "address",
          },
          {
            internalType: "int256",
            name: "minPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "maxPrice",
            type: "int256",
          },
        ],
        internalType: "struct OracleProcess.OracleParam[]",
        name: "params",
        type: "tuple[]",
      },
    ],
    name: "setOraclePrices",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061035b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063180e24bb1461003b5780631d3c97b714610060575b600080fd5b61004e6100493660046101d8565b610075565b60405190815260200160405180910390f35b61007361006e366004610214565b610129565b005b6040517f180e24bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152811515602482015260009073__$76a505dbd6210c6de5172a9e6577e0d579$__9063180e24bb90604401602060405180830381865af41580156100fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101229190610289565b9392505050565b6040517f7532d8bc00000000000000000000000000000000000000000000000000000000815273__$76a505dbd6210c6de5172a9e6577e0d579$__90637532d8bc9061017b90859085906004016102a2565b60006040518083038186803b15801561019357600080fd5b505af41580156101a7573d6000803e3d6000fd5b505050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146101d357600080fd5b919050565b600080604083850312156101eb57600080fd5b6101f4836101af565b91506020830135801515811461020957600080fd5b809150509250929050565b6000806020838503121561022757600080fd5b823567ffffffffffffffff8082111561023f57600080fd5b818501915085601f83011261025357600080fd5b81358181111561026257600080fd5b8660208260071b850101111561027757600080fd5b60209290920196919550909350505050565b60006020828403121561029b57600080fd5b5051919050565b6020808252818101839052600090604080840186845b878110156103185773ffffffffffffffffffffffffffffffffffffffff806102df846101af565b168452806102ee8785016101af565b168487015250818401358484015260608083013590840152608092830192909101906001016102b8565b509097965050505050505056fea2646970667358221220b6b47a4c8eb35de5e67c0bf0144d0ec11ff4c4b24659dbba7454d986ccb0615e64736f6c63430008120033";

type OracleFacetConstructorParams =
  | [linkLibraryAddresses: OracleFacetLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OracleFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class OracleFacet__factory extends ContractFactory {
  constructor(...args: OracleFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        OracleFacet__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: OracleFacetLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$76a505dbd6210c6de5172a9e6577e0d579\\$__", "g"),
      linkLibraryAddresses["contracts/process/OracleProcess.sol:OracleProcess"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OracleFacet & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): OracleFacet__factory {
    return super.connect(runner) as OracleFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleFacetInterface {
    return new Interface(_abi) as OracleFacetInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): OracleFacet {
    return new Contract(address, _abi, runner) as unknown as OracleFacet;
  }
}

export interface OracleFacetLibraryAddresses {
  ["contracts/process/OracleProcess.sol:OracleProcess"]: string;
}
