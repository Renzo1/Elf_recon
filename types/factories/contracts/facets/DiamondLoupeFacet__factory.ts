/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DiamondLoupeFacet,
  DiamondLoupeFacetInterface,
} from "../../../contracts/facets/DiamondLoupeFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_functionSelector",
        type: "bytes4",
      },
    ],
    name: "facetAddress",
    outputs: [
      {
        internalType: "address",
        name: "facetAddress_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facetAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "facetAddresses_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_facet",
        type: "address",
      },
    ],
    name: "facetFunctionSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "_facetFunctionSelectors",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facets",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondLoupe.Facet[]",
        name: "facets_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d0e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80637a0ed627116100505780637a0ed627146100fa578063adfca15e1461010f578063cdffacc61461012f57600080fd5b806301ffc9a71461006c57806352ef6b2c146100e5575b600080fd5b6100d061007a366004610a01565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081527fdab92b47c5ad1b8db72bf159fe8f1c5404b027a749c8120fa1db90a19db43250602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100ed6101cb565b6040516100dc9190610a4a565b6101026103ca565b6040516100dc9190610b01565b61012261011d366004610ba9565b610869565b6040516100dc9190610bdf565b6101a661013d366004610a01565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081527fdab92b47c5ad1b8db72bf159fe8f1c5404b027a749c8120fa1db90a19db4324e602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100dc565b7fdab92b47c5ad1b8db72bf159fe8f1c5404b027a749c8120fa1db90a19db4324f546060907fdab92b47c5ad1b8db72bf159fe8f1c5404b027a749c8120fa1db90a19db4324e908067ffffffffffffffff81111561022b5761022b610bf2565b604051908082528060200260200182016040528015610254578160200160208202803683370190505b5092506000805b828110156103c057600084600101828154811061027a5761027a610c21565b6000918252602080832060088304015460079092166004026101000a90910460e01b7fffffffff000000000000000000000000000000000000000000000000000000008116835290879052604082205490925073ffffffffffffffffffffffffffffffffffffffff1690805b858110156103555788818151811061030057610300610c21565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036103435760019150610355565b8061034d81610c7f565b9150506102e6565b50801561036557506103ae915050565b8188868151811061037857610378610c21565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152846103a781610c7f565b9550505050505b806103b881610c7f565b91505061025b565b5080845250505090565b7fdab92b47c5ad1b8db72bf159fe8f1c5404b027a749c8120fa1db90a19db4324f546060907fdab92b47c5ad1b8db72bf159fe8f1c5404b027a749c8120fa1db90a19db4324e908067ffffffffffffffff81111561042a5761042a610bf2565b60405190808252806020026020018201604052801561047057816020015b6040805180820190915260008152606060208201528152602001906001900390816104485790505b50925060008167ffffffffffffffff81111561048e5761048e610bf2565b6040519080825280602002602001820160405280156104b7578160200160208202803683370190505b5090506000805b838110156107f65760008560010182815481106104dd576104dd610c21565b6000918252602080832060088304015460079092166004026101000a90910460e01b7fffffffff000000000000000000000000000000000000000000000000000000008116835290889052604082205490925073ffffffffffffffffffffffffffffffffffffffff1690805b85811015610683578273ffffffffffffffffffffffffffffffffffffffff168a828151811061057a5761057a610c21565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff160361067157838a82815181106105b4576105b4610c21565b6020026020010151602001518883815181106105d2576105d2610c21565b602002602001015161ffff16815181106105ee576105ee610c21565b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505086818151811061064c5761064c610c21565b60200260200101805180919061066190610cb7565b61ffff1690525060019150610683565b8061067b81610c7f565b915050610549565b50801561069357506107e4915050565b818986815181106106a6576106a6610c21565b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff90911690528667ffffffffffffffff8111156106e4576106e4610bf2565b60405190808252806020026020018201604052801561070d578160200160208202803683370190505b5089868151811061072057610720610c21565b6020026020010151602001819052508289868151811061074257610742610c21565b60200260200101516020015160008151811061076057610760610c21565b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060018686815181106107c0576107c0610c21565b61ffff90921660209283029190910190910152846107dd81610c7f565b9550505050505b806107ee81610c7f565b9150506104be565b5060005b8181101561085e57600083828151811061081657610816610c21565b602002602001015161ffff169050600087838151811061083857610838610c21565b60200260200101516020015190508181525050808061085690610c7f565b9150506107fa565b508085525050505090565b7fdab92b47c5ad1b8db72bf159fe8f1c5404b027a749c8120fa1db90a19db4324f546060907fdab92b47c5ad1b8db72bf159fe8f1c5404b027a749c8120fa1db90a19db4324e9060008167ffffffffffffffff8111156108cb576108cb610bf2565b6040519080825280602002602001820160405280156108f4578160200160208202803683370190505b50935060005b828110156109f657600084600101828154811061091957610919610c21565b6000918252602080832060088304015460079092166004026101000a90910460e01b7fffffffff00000000000000000000000000000000000000000000000000000000811683529087905260409091205490915073ffffffffffffffffffffffffffffffffffffffff9081169088168190036109e157818785815181106109a2576109a2610c21565b7fffffffff0000000000000000000000000000000000000000000000000000000090921660209283029190910190910152836109dd81610c7f565b9450505b505080806109ee90610c7f565b9150506108fa565b508352509092915050565b600060208284031215610a1357600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a4357600080fd5b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610a9857835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610a66565b50909695505050505050565b600081518084526020808501945080840160005b83811015610af65781517fffffffff000000000000000000000000000000000000000000000000000000001687529582019590820190600101610ab8565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610b9b578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805173ffffffffffffffffffffffffffffffffffffffff168452870151878401879052610b8887850182610aa4565b9588019593505090860190600101610b28565b509098975050505050505050565b600060208284031215610bbb57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610a4357600080fd5b602081526000610a436020830184610aa4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cb057610cb0610c50565b5060010190565b600061ffff808316818103610cce57610cce610c50565b600101939250505056fea26469706673582212204b108551b80458916cd02e5501f70a5a41892ceb73b53e8f2f0eb81e4e83f20a64736f6c63430008120033";

type DiamondLoupeFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondLoupeFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondLoupeFacet__factory extends ContractFactory {
  constructor(...args: DiamondLoupeFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DiamondLoupeFacet & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DiamondLoupeFacet__factory {
    return super.connect(runner) as DiamondLoupeFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondLoupeFacetInterface {
    return new Interface(_abi) as DiamondLoupeFacetInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DiamondLoupeFacet {
    return new Contract(address, _abi, runner) as unknown as DiamondLoupeFacet;
  }
}
