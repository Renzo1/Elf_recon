/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DiamondCutFacet,
  DiamondCutFacetInterface,
} from "../../../contracts/facets/DiamondCutFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_selector",
        type: "bytes4",
      },
    ],
    name: "CannotAddFunctionToDiamondThatAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4[]",
        name: "_selectors",
        type: "bytes4[]",
      },
    ],
    name: "CannotAddSelectorsToZeroAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_selector",
        type: "bytes4",
      },
    ],
    name: "CannotRemoveFunctionThatDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_selector",
        type: "bytes4",
      },
    ],
    name: "CannotRemoveImmutableFunction",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_selector",
        type: "bytes4",
      },
    ],
    name: "CannotReplaceFunctionThatDoesNotExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_selector",
        type: "bytes4",
      },
    ],
    name: "CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4[]",
        name: "_selectors",
        type: "bytes4[]",
      },
    ],
    name: "CannotReplaceFunctionsFromFacetWithZeroAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_selector",
        type: "bytes4",
      },
    ],
    name: "CannotReplaceImmutableFunction",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_action",
        type: "uint8",
      },
    ],
    name: "IncorrectFacetCutAction",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_initializationContractAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "InitializationFunctionReverted",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32",
      },
    ],
    name: "InvalidRoleAccess",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contractAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "NoBytecodeAtAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_facetAddress",
        type: "address",
      },
    ],
    name: "NoSelectorsProvidedForFacetForCut",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_facetAddress",
        type: "address",
      },
    ],
    name: "RemoveFacetAddressMustBeZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamond.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        indexed: false,
        internalType: "struct IDiamond.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_init",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "DiamondCut",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamond.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamond.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "_init",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "diamondCut",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611661806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610f0d565b610045565b005b61006e7f41444d494e0000000000000000000000000000000000000000000000000000006100bf565b6100b861007b858761108a565b8484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061011092505050565b5050505050565b6100c933826102ff565b61010d576040517fb5f43834000000000000000000000000000000000000000000000000000000008152336004820152602481018290526044015b60405180910390fd5b50565b60005b83518110156102b4576000848281518110610130576101306111e6565b60200260200101516040015190506000858381518110610152576101526111e6565b602002602001015160000151905081516000036101b3576040517fe767f91f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610104565b60008684815181106101c7576101c76111e6565b6020026020010151602001519050600060028111156101e8576101e8611215565b8160028111156101fa576101fa611215565b0361020e57610209828461034a565b61029e565b600181600281111561022257610222611215565b036102315761020982846105e4565b600281600281111561024557610245611215565b036102545761020982846108cb565b80600281111561026657610266611215565b6040517f7fe9a41e00000000000000000000000000000000000000000000000000000000815260ff9091166004820152602401610104565b50505080806102ac90611273565b915050610113565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738383836040516102e893929190611319565b60405180910390a16102fa8282610ce1565b505050565b60008061030a610dda565b73ffffffffffffffffffffffffffffffffffffffff851660009081526020828152604080832087845260010190915290205490915015155b949350505050565b73ffffffffffffffffffffffffffffffffffffffff821661039957806040517f0ae3681c0000000000000000000000000000000000000000000000000000000081526004016101049190611481565b7fdab92b47c5ad1b8db72bf159fe8f1c5404b027a749c8120fa1db90a19db4324f54604080516060810190915260248082527fdab92b47c5ad1b8db72bf159fe8f1c5404b027a749c8120fa1db90a19db4324e9291610402918691906115b86020830139610e5a565b60005b83518110156100b8576000848281518110610422576104226111e6565b6020908102919091018101517fffffffff00000000000000000000000000000000000000000000000000000000811660009081529186905260409091205490915073ffffffffffffffffffffffffffffffffffffffff1680156104d5576040517febbf5d070000000000000000000000000000000000000000000000000000000081527fffffffff0000000000000000000000000000000000000000000000000000000083166004820152602401610104565b60408051808201825273ffffffffffffffffffffffffffffffffffffffff808a16825261ffff80881660208085019182527fffffffff00000000000000000000000000000000000000000000000000000000881660009081528b825295862094518554925190931674010000000000000000000000000000000000000000027fffffffffffffffffffff00000000000000000000000000000000000000000000909216929093169190911717909155600180880180549182018155835291206008820401805460e085901c60046007909416939093026101000a92830263ffffffff9093021916919091179055836105cc816114e7565b945050505080806105dc90611273565b915050610405565b7fdab92b47c5ad1b8db72bf159fe8f1c5404b027a749c8120fa1db90a19db4324e73ffffffffffffffffffffffffffffffffffffffff831661065457816040517fcd98a96f0000000000000000000000000000000000000000000000000000000081526004016101049190611481565b6106768360405180606001604052806028815260200161160460289139610e5a565b60005b82518110156108c5576000838281518110610696576106966111e6565b6020908102919091018101517fffffffff00000000000000000000000000000000000000000000000000000000811660009081529185905260409091205490915073ffffffffffffffffffffffffffffffffffffffff1630810361074a576040517f520300da0000000000000000000000000000000000000000000000000000000081527fffffffff0000000000000000000000000000000000000000000000000000000083166004820152602401610104565b8573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107d3576040517f358d9d1a0000000000000000000000000000000000000000000000000000000081527fffffffff0000000000000000000000000000000000000000000000000000000083166004820152602401610104565b73ffffffffffffffffffffffffffffffffffffffff8116610844576040517f7479f9390000000000000000000000000000000000000000000000000000000081527fffffffff0000000000000000000000000000000000000000000000000000000083166004820152602401610104565b507fffffffff0000000000000000000000000000000000000000000000000000000016600090815260208390526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8616179055806108bd81611273565b915050610679565b50505050565b7fdab92b47c5ad1b8db72bf159fe8f1c5404b027a749c8120fa1db90a19db4324f547fdab92b47c5ad1b8db72bf159fe8f1c5404b027a749c8120fa1db90a19db4324e9073ffffffffffffffffffffffffffffffffffffffff841615610975576040517fd091bc8100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610104565b60005b83518110156100b8576000848281518110610995576109956111e6565b6020908102919091018101517fffffffff000000000000000000000000000000000000000000000000000000008116600090815286835260409081902081518083019092525473ffffffffffffffffffffffffffffffffffffffff81168083527401000000000000000000000000000000000000000090910461ffff169382019390935290925090610a77576040517f7a08a22d0000000000000000000000000000000000000000000000000000000081527fffffffff0000000000000000000000000000000000000000000000000000000083166004820152602401610104565b80513073ffffffffffffffffffffffffffffffffffffffff90911603610aed576040517f6fafeb080000000000000000000000000000000000000000000000000000000081527fffffffff0000000000000000000000000000000000000000000000000000000083166004820152602401610104565b83610af781611508565b94505083816020015161ffff1614610c18576000856001018581548110610b2057610b206111e6565b90600052602060002090600891828204019190066004029054906101000a900460e01b90508086600101836020015161ffff1681548110610b6357610b636111e6565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c92909202939093179055838201517fffffffff00000000000000000000000000000000000000000000000000000000939093168152908790526040902080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff909316929092029190911790555b84600101805480610c2b57610c2b61153d565b6000828152602080822060087fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90940193840401805463ffffffff600460078716026101000a0219169055919092557fffffffff00000000000000000000000000000000000000000000000000000000909316815291859052506040902080547fffffffffffffffffffff0000000000000000000000000000000000000000000016905580610cd981611273565b915050610978565b73ffffffffffffffffffffffffffffffffffffffff8216610d00575050565b610d22826040518060600160405280602881526020016115dc60289139610e5a565b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051610d4a919061156c565b600060405180830381855af49150503d8060008114610d85576040519150601f19603f3d011682016040523d82523d6000602084013e610d8a565b606091505b5091509150816108c557805115610da45780518082602001fd5b83836040517f192105d7000000000000000000000000000000000000000000000000000000008152600401610104929190611588565b600080604051602001610e1e906020808252601e908201527f78797a2e656c66692e73746f726167652e416363657373436f6e74726f6c0000604082015260600190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012092915050565b813b60008190036102fa5782826040517f919834b9000000000000000000000000000000000000000000000000000000008152600401610104929190611588565b803573ffffffffffffffffffffffffffffffffffffffff81168114610ebf57600080fd5b919050565b60008083601f840112610ed657600080fd5b50813567ffffffffffffffff811115610eee57600080fd5b602083019150836020828501011115610f0657600080fd5b9250929050565b600080600080600060608688031215610f2557600080fd5b853567ffffffffffffffff80821115610f3d57600080fd5b818801915088601f830112610f5157600080fd5b813581811115610f6057600080fd5b8960208260051b8501011115610f7557600080fd5b60208301975080965050610f8b60208901610e9b565b94506040880135915080821115610fa157600080fd5b50610fae88828901610ec4565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561101157611011610fbf565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561105e5761105e610fbf565b604052919050565b600067ffffffffffffffff82111561108057611080610fbf565b5060051b60200190565b600061109d61109884611066565b611017565b83815260208082019190600586811b8601368111156110bb57600080fd5b865b818110156111d957803567ffffffffffffffff808211156110de5760008081fd5b818a019150606082360312156110f45760008081fd5b6110fc610fee565b61110583610e9b565b815286830135600381106111195760008081fd5b81880152604083810135838111156111315760008081fd5b939093019236601f85011261114857600092508283fd5b8335925061115861109884611066565b83815292871b840188019288810190368511156111755760008081fd5b948901945b848610156111c25785357fffffffff00000000000000000000000000000000000000000000000000000000811681146111b35760008081fd5b8252948901949089019061117a565b9183019190915250885250509483019483016110bd565b5092979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036112a4576112a4611244565b5060010190565b60005b838110156112c65781810151838201526020016112ae565b50506000910152565b600081518084526112e78160208601602086016112ab565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b84811015611444577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808a8503018652815188850173ffffffffffffffffffffffffffffffffffffffff825116865284820151600381106113cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b8083101561142f5783517fffffffff000000000000000000000000000000000000000000000000000000001682529286019260019290920191908601906113ed565b50978501979550505090820190600101611342565b505073ffffffffffffffffffffffffffffffffffffffff8a1690880152868103604088015261147381896112cf565b9a9950505050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156114db5783517fffffffff00000000000000000000000000000000000000000000000000000000168352928401929184019160010161149d565b50909695505050505050565b600061ffff8083168181036114fe576114fe611244565b6001019392505050565b60008161151757611517611244565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000825161157e8184602087016112ab565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff8316815260406020820152600061034260408301846112cf56fe4c69624469616d6f6e644375743a2041646420666163657420686173206e6f20636f64654c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f6465a2646970667358221220e74a6569b94452c38b7597467e7fa753897ce4fdfa5a22eef80ddd8e889fb23864736f6c63430008120033";

type DiamondCutFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondCutFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondCutFacet__factory extends ContractFactory {
  constructor(...args: DiamondCutFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DiamondCutFacet & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DiamondCutFacet__factory {
    return super.connect(runner) as DiamondCutFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondCutFacetInterface {
    return new Interface(_abi) as DiamondCutFacetInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DiamondCutFacet {
    return new Contract(address, _abi, runner) as unknown as DiamondCutFacet;
  }
}
