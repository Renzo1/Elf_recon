/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DiamondInit,
  DiamondInitInterface,
} from "../../../contracts/router/DiamondInit";

const _abi = [
  {
    inputs: [],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610157806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e1c7392a14610030575b600080fd5b61011f7fdab92b47c5ad1b8db72bf159fe8f1c5404b027a749c8120fa1db90a19db432506020527fb46b76674e207a68011f6dd4115a7d36585809e7100bf87f994f14761fc0bda3805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091821681179092557fd89dcb904de2ee5a64c455edf3aa8fa4accba0b29a38ebf28a59561a672287a880548216831790557f48e2b093000000000000000000000000000000000000000000000000000000006000527fc2279572da5bef2fd6de7c5d89bb24597ca4c054256566f0be85b2409cffd2d080549091169091179055565b00fea26469706673582212200e7de70ee1d1cc532a8840c1ac9c3cc973112537f078b390956e0618472e46dd64736f6c63430008120033";

type DiamondInitConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondInitConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondInit__factory extends ContractFactory {
  constructor(...args: DiamondInitConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DiamondInit & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DiamondInit__factory {
    return super.connect(runner) as DiamondInit__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondInitInterface {
    return new Interface(_abi) as DiamondInitInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DiamondInit {
    return new Contract(address, _abi, runner) as unknown as DiamondInit;
  }
}
